{"version":3,"file":"ng2-ui-auth.umd.min.js","sources":["~/ng2-ui-auth/src/token.refresh.service.ts","~/ng2-ui-auth/src/storage-type.enum.ts","~/ng2-ui-auth/src/utils.ts","~/ng2-ui-auth/src/config.service.ts","~/ng2-ui-auth/src/storage.service.ts","~/ng2-ui-auth/src/shared.service.ts","~/ng2-ui-auth/src/popup.service.ts","~/ng2-ui-auth/src/oauth1.service.ts","~/ng2-ui-auth/src/oauth2.service.ts","../../../node_modules/src/util/root.ts","../../../node_modules/src/util/isFunction.ts","../../../node_modules/src/util/isArray.ts","../../../node_modules/src/util/isObject.ts","../../../node_modules/src/util/tryCatch.ts","../../../node_modules/src/util/errorObject.ts","../../../node_modules/src/util/UnsubscriptionError.ts","../../../node_modules/src/Subscription.ts","../../../node_modules/src/Observer.ts","../../../node_modules/src/symbol/rxSubscriber.ts","../../../node_modules/src/Subscriber.ts","../../../node_modules/src/util/toSubscriber.ts","../../../node_modules/src/symbol/observable.ts","../../../node_modules/src/util/noop.ts","../../../node_modules/src/util/pipe.ts","../../../node_modules/src/Observable.ts","../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../node_modules/src/SubjectSubscription.ts","../../../node_modules/src/Subject.ts","../../../node_modules/src/AsyncSubject.ts","../../../node_modules/src/observable/BoundCallbackObservable.ts","../../../node_modules/src/observable/bindCallback.ts","../../../node_modules/src/add/observable/bindCallback.ts","../../../node_modules/src/observable/BoundNodeCallbackObservable.ts","../../../node_modules/src/observable/bindNodeCallback.ts","../../../node_modules/src/add/observable/bindNodeCallback.ts","../../../node_modules/src/util/isScheduler.ts","../../../node_modules/src/observable/ScalarObservable.ts","../../../node_modules/src/observable/EmptyObservable.ts","../../../node_modules/src/observable/ArrayObservable.ts","../../../node_modules/src/OuterSubscriber.ts","../../../node_modules/src/util/isArrayLike.ts","../../../node_modules/src/util/isPromise.ts","../../../node_modules/src/symbol/iterator.ts","../../../node_modules/src/InnerSubscriber.ts","../../../node_modules/src/util/subscribeToResult.ts","../../../node_modules/src/operators/combineLatest.ts","../../../node_modules/src/observable/combineLatest.ts","../../../node_modules/src/add/observable/combineLatest.ts","../../../node_modules/src/observable/of.ts","../../../node_modules/src/observable/PromiseObservable.ts","../../../node_modules/src/observable/IteratorObservable.ts","../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../node_modules/src/Notification.ts","../../../node_modules/src/operators/observeOn.ts","../../../node_modules/src/observable/FromObservable.ts","../../../node_modules/src/observable/from.ts","../../../node_modules/src/operators/mergeMap.ts","../../../node_modules/src/util/identity.ts","../../../node_modules/src/operators/mergeAll.ts","../../../node_modules/src/operators/concatAll.ts","../../../node_modules/src/observable/concat.ts","../../../node_modules/src/add/observable/concat.ts","../../../node_modules/src/observable/DeferObservable.ts","../../../node_modules/src/observable/defer.ts","../../../node_modules/src/add/observable/defer.ts","../../../node_modules/src/observable/empty.ts","../../../node_modules/src/add/observable/empty.ts","../../../node_modules/src/observable/ForkJoinObservable.ts","../../../node_modules/src/observable/forkJoin.ts","../../../node_modules/src/add/observable/forkJoin.ts","../../../node_modules/src/add/observable/from.ts","../../../node_modules/src/observable/FromEventObservable.ts","../../../node_modules/src/observable/fromEvent.ts","../../../node_modules/src/add/observable/fromEvent.ts","../../../node_modules/src/observable/FromEventPatternObservable.ts","../../../node_modules/src/observable/fromEventPattern.ts","../../../node_modules/src/add/observable/fromEventPattern.ts","../../../node_modules/src/observable/fromPromise.ts","../../../node_modules/src/add/observable/fromPromise.ts","../../../node_modules/src/observable/GenerateObservable.ts","../../../node_modules/src/observable/generate.ts","../../../node_modules/src/add/observable/generate.ts","../../../node_modules/src/observable/IfObservable.ts","../../../node_modules/src/observable/if.ts","../../../node_modules/src/add/observable/if.ts","../../../node_modules/src/util/isNumeric.ts","../../../node_modules/src/scheduler/Action.ts","../../../node_modules/src/scheduler/AsyncAction.ts","../../../node_modules/src/Scheduler.ts","../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../node_modules/src/scheduler/async.ts","../../../node_modules/src/observable/IntervalObservable.ts","../../../node_modules/src/observable/interval.ts","../../../node_modules/src/add/observable/interval.ts","../../../node_modules/src/operators/merge.ts","../../../node_modules/src/operator/merge.ts","../../../node_modules/src/observable/merge.ts","../../../node_modules/src/add/observable/merge.ts","../../../node_modules/src/observable/race.ts","../../../node_modules/src/add/observable/race.ts","../../../node_modules/src/observable/NeverObservable.ts","../../../node_modules/src/observable/never.ts","../../../node_modules/src/add/observable/never.ts","../../../node_modules/src/add/observable/of.ts","../../../node_modules/src/operators/onErrorResumeNext.ts","../../../node_modules/src/observable/onErrorResumeNext.ts","../../../node_modules/src/add/observable/onErrorResumeNext.ts","../../../node_modules/src/observable/PairsObservable.ts","../../../node_modules/src/observable/pairs.ts","../../../node_modules/src/add/observable/pairs.ts","../../../node_modules/src/observable/RangeObservable.ts","../../../node_modules/src/observable/range.ts","../../../node_modules/src/add/observable/range.ts","../../../node_modules/src/observable/UsingObservable.ts","../../../node_modules/src/observable/using.ts","../../../node_modules/src/add/observable/using.ts","../../../node_modules/src/observable/ErrorObservable.ts","../../../node_modules/src/observable/throw.ts","../../../node_modules/src/add/observable/throw.ts","../../../node_modules/src/util/isDate.ts","../../../node_modules/src/observable/TimerObservable.ts","../../../node_modules/src/observable/timer.ts","../../../node_modules/src/add/observable/timer.ts","../../../node_modules/src/operators/zip.ts","../../../node_modules/src/observable/zip.ts","../../../node_modules/src/add/observable/zip.ts","../../../node_modules/src/operators/map.ts","../../../node_modules/src/observable/dom/AjaxObservable.ts","../../../node_modules/src/observable/dom/ajax.ts","../../../node_modules/src/add/observable/dom/ajax.ts","../../../node_modules/src/scheduler/QueueAction.ts","../../../node_modules/src/scheduler/queue.ts","../../../node_modules/src/scheduler/QueueScheduler.ts","../../../node_modules/src/ReplaySubject.ts","../../../node_modules/src/util/assign.ts","../../../node_modules/src/observable/dom/WebSocketSubject.ts","../../../node_modules/src/observable/dom/webSocket.ts","../../../node_modules/src/add/observable/dom/webSocket.ts","../../../node_modules/src/operators/buffer.ts","../../../node_modules/src/operator/buffer.ts","../../../node_modules/src/add/operator/buffer.ts","../../../node_modules/src/operators/bufferCount.ts","../../../node_modules/src/operator/bufferCount.ts","../../../node_modules/src/add/operator/bufferCount.ts","../../../node_modules/src/operators/bufferTime.ts","../../../node_modules/src/operator/bufferTime.ts","../../../node_modules/src/add/operator/bufferTime.ts","../../../node_modules/src/operators/bufferToggle.ts","../../../node_modules/src/operator/bufferToggle.ts","../../../node_modules/src/add/operator/bufferToggle.ts","../../../node_modules/src/operators/bufferWhen.ts","../../../node_modules/src/operator/bufferWhen.ts","../../../node_modules/src/add/operator/bufferWhen.ts","../../../node_modules/src/operators/catchError.ts","../../../node_modules/src/operator/catch.ts","../../../node_modules/src/add/operator/catch.ts","../../../node_modules/src/operators/combineAll.ts","../../../node_modules/src/operator/combineAll.ts","../../../node_modules/src/add/operator/combineAll.ts","../../../node_modules/src/operator/combineLatest.ts","../../../node_modules/src/add/operator/combineLatest.ts","../../../node_modules/src/operators/concat.ts","../../../node_modules/src/operator/concat.ts","../../../node_modules/src/add/operator/concat.ts","../../../node_modules/src/operator/concatAll.ts","../../../node_modules/src/add/operator/concatAll.ts","../../../node_modules/src/operators/concatMap.ts","../../../node_modules/src/operator/concatMap.ts","../../../node_modules/src/add/operator/concatMap.ts","../../../node_modules/src/operators/concatMapTo.ts","../../../node_modules/src/operator/concatMapTo.ts","../../../node_modules/src/add/operator/concatMapTo.ts","../../../node_modules/src/operators/count.ts","../../../node_modules/src/operator/count.ts","../../../node_modules/src/add/operator/count.ts","../../../node_modules/src/operators/dematerialize.ts","../../../node_modules/src/operator/dematerialize.ts","../../../node_modules/src/add/operator/dematerialize.ts","../../../node_modules/src/operators/debounce.ts","../../../node_modules/src/operator/debounce.ts","../../../node_modules/src/add/operator/debounce.ts","../../../node_modules/src/operators/debounceTime.ts","../../../node_modules/src/operator/debounceTime.ts","../../../node_modules/src/add/operator/debounceTime.ts","../../../node_modules/src/operators/defaultIfEmpty.ts","../../../node_modules/src/operator/defaultIfEmpty.ts","../../../node_modules/src/add/operator/defaultIfEmpty.ts","../../../node_modules/src/operators/delay.ts","../../../node_modules/src/operator/delay.ts","../../../node_modules/src/add/operator/delay.ts","../../../node_modules/src/operators/delayWhen.ts","../../../node_modules/src/operator/delayWhen.ts","../../../node_modules/src/add/operator/delayWhen.ts","../../../node_modules/src/util/Set.ts","../../../node_modules/src/operators/distinct.ts","../../../node_modules/src/operator/distinct.ts","../../../node_modules/src/add/operator/distinct.ts","../../../node_modules/src/operators/distinctUntilChanged.ts","../../../node_modules/src/operator/distinctUntilChanged.ts","../../../node_modules/src/add/operator/distinctUntilChanged.ts","../../../node_modules/src/operators/distinctUntilKeyChanged.ts","../../../node_modules/src/operator/distinctUntilKeyChanged.ts","../../../node_modules/src/add/operator/distinctUntilKeyChanged.ts","../../../node_modules/src/operators/tap.ts","../../../node_modules/src/operator/do.ts","../../../node_modules/src/add/operator/do.ts","../../../node_modules/src/operators/exhaust.ts","../../../node_modules/src/operator/exhaust.ts","../../../node_modules/src/add/operator/exhaust.ts","../../../node_modules/src/operators/exhaustMap.ts","../../../node_modules/src/operator/exhaustMap.ts","../../../node_modules/src/add/operator/exhaustMap.ts","../../../node_modules/src/operators/expand.ts","../../../node_modules/src/operator/expand.ts","../../../node_modules/src/add/operator/expand.ts","../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../node_modules/src/operators/elementAt.ts","../../../node_modules/src/operator/elementAt.ts","../../../node_modules/src/add/operator/elementAt.ts","../../../node_modules/src/operators/filter.ts","../../../node_modules/src/operator/filter.ts","../../../node_modules/src/add/operator/filter.ts","../../../node_modules/src/operators/finalize.ts","../../../node_modules/src/operator/finally.ts","../../../node_modules/src/add/operator/finally.ts","../../../node_modules/src/operators/find.ts","../../../node_modules/src/operator/find.ts","../../../node_modules/src/add/operator/find.ts","../../../node_modules/src/operators/findIndex.ts","../../../node_modules/src/operator/findIndex.ts","../../../node_modules/src/add/operator/findIndex.ts","../../../node_modules/src/util/EmptyError.ts","../../../node_modules/src/operators/first.ts","../../../node_modules/src/operator/first.ts","../../../node_modules/src/add/operator/first.ts","../../../node_modules/src/util/MapPolyfill.ts","../../../node_modules/src/util/Map.ts","../../../node_modules/src/util/FastMap.ts","../../../node_modules/src/operators/groupBy.ts","../../../node_modules/src/operator/groupBy.ts","../../../node_modules/src/add/operator/groupBy.ts","../../../node_modules/src/operators/ignoreElements.ts","../../../node_modules/src/operator/ignoreElements.ts","../../../node_modules/src/add/operator/ignoreElements.ts","../../../node_modules/src/operators/isEmpty.ts","../../../node_modules/src/operator/isEmpty.ts","../../../node_modules/src/add/operator/isEmpty.ts","../../../node_modules/src/operators/audit.ts","../../../node_modules/src/operator/audit.ts","../../../node_modules/src/add/operator/audit.ts","../../../node_modules/src/operators/auditTime.ts","../../../node_modules/src/operator/auditTime.ts","../../../node_modules/src/add/operator/auditTime.ts","../../../node_modules/src/operators/last.ts","../../../node_modules/src/operator/last.ts","../../../node_modules/src/add/operator/last.ts","../../../node_modules/src/operator/let.ts","../../../node_modules/src/add/operator/let.ts","../../../node_modules/src/operators/every.ts","../../../node_modules/src/operator/every.ts","../../../node_modules/src/add/operator/every.ts","../../../node_modules/src/operator/map.ts","../../../node_modules/src/add/operator/map.ts","../../../node_modules/src/operators/mapTo.ts","../../../node_modules/src/operator/mapTo.ts","../../../node_modules/src/add/operator/mapTo.ts","../../../node_modules/src/operators/materialize.ts","../../../node_modules/src/operator/materialize.ts","../../../node_modules/src/add/operator/materialize.ts","../../../node_modules/src/operators/scan.ts","../../../node_modules/src/operators/takeLast.ts","../../../node_modules/src/operators/reduce.ts","../../../node_modules/src/operators/max.ts","../../../node_modules/src/operator/max.ts","../../../node_modules/src/add/operator/max.ts","../../../node_modules/src/add/operator/merge.ts","../../../node_modules/src/operator/mergeAll.ts","../../../node_modules/src/add/operator/mergeAll.ts","../../../node_modules/src/operator/mergeMap.ts","../../../node_modules/src/add/operator/mergeMap.ts","../../../node_modules/src/operators/mergeMapTo.ts","../../../node_modules/src/operator/mergeMapTo.ts","../../../node_modules/src/add/operator/mergeMapTo.ts","../../../node_modules/src/operators/mergeScan.ts","../../../node_modules/src/operator/mergeScan.ts","../../../node_modules/src/add/operator/mergeScan.ts","../../../node_modules/src/operators/min.ts","../../../node_modules/src/operator/min.ts","../../../node_modules/src/add/operator/min.ts","../../../node_modules/src/operators/refCount.ts","../../../node_modules/src/observable/ConnectableObservable.ts","../../../node_modules/src/operators/multicast.ts","../../../node_modules/src/operator/multicast.ts","../../../node_modules/src/add/operator/multicast.ts","../../../node_modules/src/operator/observeOn.ts","../../../node_modules/src/add/operator/observeOn.ts","../../../node_modules/src/operator/onErrorResumeNext.ts","../../../node_modules/src/add/operator/onErrorResumeNext.ts","../../../node_modules/src/operators/pairwise.ts","../../../node_modules/src/operator/pairwise.ts","../../../node_modules/src/add/operator/pairwise.ts","../../../node_modules/src/util/not.ts","../../../node_modules/src/operators/partition.ts","../../../node_modules/src/operator/partition.ts","../../../node_modules/src/add/operator/partition.ts","../../../node_modules/src/operators/pluck.ts","../../../node_modules/src/operator/pluck.ts","../../../node_modules/src/add/operator/pluck.ts","../../../node_modules/src/operators/publish.ts","../../../node_modules/src/operator/publish.ts","../../../node_modules/src/add/operator/publish.ts","../../../node_modules/src/BehaviorSubject.ts","../../../node_modules/src/operators/publishBehavior.ts","../../../node_modules/src/operator/publishBehavior.ts","../../../node_modules/src/add/operator/publishBehavior.ts","../../../node_modules/src/operators/publishReplay.ts","../../../node_modules/src/operator/publishReplay.ts","../../../node_modules/src/add/operator/publishReplay.ts","../../../node_modules/src/operators/publishLast.ts","../../../node_modules/src/operator/publishLast.ts","../../../node_modules/src/add/operator/publishLast.ts","../../../node_modules/src/operators/race.ts","../../../node_modules/src/operator/race.ts","../../../node_modules/src/add/operator/race.ts","../../../node_modules/src/operator/reduce.ts","../../../node_modules/src/add/operator/reduce.ts","../../../node_modules/src/operators/repeat.ts","../../../node_modules/src/operator/repeat.ts","../../../node_modules/src/add/operator/repeat.ts","../../../node_modules/src/operators/repeatWhen.ts","../../../node_modules/src/operator/repeatWhen.ts","../../../node_modules/src/add/operator/repeatWhen.ts","../../../node_modules/src/operators/retry.ts","../../../node_modules/src/operator/retry.ts","../../../node_modules/src/add/operator/retry.ts","../../../node_modules/src/operators/retryWhen.ts","../../../node_modules/src/operator/retryWhen.ts","../../../node_modules/src/add/operator/retryWhen.ts","../../../node_modules/src/operators/sample.ts","../../../node_modules/src/operator/sample.ts","../../../node_modules/src/add/operator/sample.ts","../../../node_modules/src/operators/sampleTime.ts","../../../node_modules/src/operator/sampleTime.ts","../../../node_modules/src/add/operator/sampleTime.ts","../../../node_modules/src/operator/scan.ts","../../../node_modules/src/add/operator/scan.ts","../../../node_modules/src/operators/sequenceEqual.ts","../../../node_modules/src/operator/sequenceEqual.ts","../../../node_modules/src/add/operator/sequenceEqual.ts","../../../node_modules/src/operators/share.ts","../../../node_modules/src/operator/share.ts","../../../node_modules/src/add/operator/share.ts","../../../node_modules/src/operators/shareReplay.ts","../../../node_modules/src/operator/shareReplay.ts","../../../node_modules/src/add/operator/shareReplay.ts","../../../node_modules/src/operators/single.ts","../../../node_modules/src/operator/single.ts","../../../node_modules/src/add/operator/single.ts","../../../node_modules/src/operators/skip.ts","../../../node_modules/src/operator/skip.ts","../../../node_modules/src/add/operator/skip.ts","../../../node_modules/src/operators/skipLast.ts","../../../node_modules/src/operator/skipLast.ts","../../../node_modules/src/add/operator/skipLast.ts","../../../node_modules/src/operators/skipUntil.ts","../../../node_modules/src/operator/skipUntil.ts","../../../node_modules/src/add/operator/skipUntil.ts","../../../node_modules/src/operators/skipWhile.ts","../../../node_modules/src/operator/skipWhile.ts","../../../node_modules/src/add/operator/skipWhile.ts","../../../node_modules/src/operators/startWith.ts","../../../node_modules/src/operator/startWith.ts","../../../node_modules/src/add/operator/startWith.ts","../../../node_modules/src/util/Immediate.ts","../../../node_modules/src/scheduler/AsapAction.ts","../../../node_modules/src/scheduler/asap.ts","../../../node_modules/src/scheduler/AsapScheduler.ts","../../../node_modules/src/observable/SubscribeOnObservable.ts","../../../node_modules/src/operators/subscribeOn.ts","../../../node_modules/src/operator/subscribeOn.ts","../../../node_modules/src/add/operator/subscribeOn.ts","../../../node_modules/src/operators/switchMap.ts","../../../node_modules/src/operators/switchAll.ts","../../../node_modules/src/operator/switch.ts","../../../node_modules/src/add/operator/switch.ts","../../../node_modules/src/operator/switchMap.ts","../../../node_modules/src/add/operator/switchMap.ts","../../../node_modules/src/operators/switchMapTo.ts","../../../node_modules/src/operator/switchMapTo.ts","../../../node_modules/src/add/operator/switchMapTo.ts","../../../node_modules/src/operators/take.ts","../../../node_modules/src/operator/take.ts","../../../node_modules/src/add/operator/take.ts","../../../node_modules/src/operator/takeLast.ts","../../../node_modules/src/add/operator/takeLast.ts","../../../node_modules/src/operators/takeUntil.ts","../../../node_modules/src/operator/takeUntil.ts","../../../node_modules/src/add/operator/takeUntil.ts","../../../node_modules/src/operators/takeWhile.ts","../../../node_modules/src/operator/takeWhile.ts","../../../node_modules/src/add/operator/takeWhile.ts","../../../node_modules/src/operators/throttle.ts","../../../node_modules/src/operator/throttle.ts","../../../node_modules/src/add/operator/throttle.ts","../../../node_modules/src/operators/throttleTime.ts","../../../node_modules/src/operator/throttleTime.ts","../../../node_modules/src/add/operator/throttleTime.ts","../../../node_modules/src/operators/timeInterval.ts","../../../node_modules/src/operator/timeInterval.ts","../../../node_modules/src/add/operator/timeInterval.ts","../../../node_modules/src/util/TimeoutError.ts","../../../node_modules/src/operators/timeout.ts","../../../node_modules/src/operator/timeout.ts","../../../node_modules/src/add/operator/timeout.ts","../../../node_modules/src/operators/timeoutWith.ts","../../../node_modules/src/operator/timeoutWith.ts","../../../node_modules/src/add/operator/timeoutWith.ts","../../../node_modules/src/operators/timestamp.ts","../../../node_modules/src/operator/timestamp.ts","../../../node_modules/src/add/operator/timestamp.ts","../../../node_modules/src/operators/toArray.ts","../../../node_modules/src/operator/toArray.ts","../../../node_modules/src/add/operator/toArray.ts","../../../node_modules/src/operators/window.ts","../../../node_modules/src/operator/window.ts","../../../node_modules/src/add/operator/window.ts","../../../node_modules/src/operators/windowCount.ts","../../../node_modules/src/operator/windowCount.ts","../../../node_modules/src/add/operator/windowCount.ts","../../../node_modules/src/operators/windowTime.ts","../../../node_modules/src/operator/windowTime.ts","../../../node_modules/src/add/operator/windowTime.ts","../../../node_modules/src/operators/windowToggle.ts","../../../node_modules/src/operator/windowToggle.ts","../../../node_modules/src/add/operator/windowToggle.ts","../../../node_modules/src/operators/windowWhen.ts","../../../node_modules/src/operator/windowWhen.ts","../../../node_modules/src/add/operator/windowWhen.ts","../../../node_modules/src/operators/withLatestFrom.ts","../../../node_modules/src/operator/withLatestFrom.ts","../../../node_modules/src/add/operator/withLatestFrom.ts","../../../node_modules/src/operator/zip.ts","../../../node_modules/src/add/operator/zip.ts","../../../node_modules/src/operators/zipAll.ts","../../../node_modules/src/operator/zipAll.ts","../../../node_modules/src/add/operator/zipAll.ts","../../../node_modules/src/testing/SubscriptionLog.ts","../../../node_modules/src/testing/SubscriptionLoggable.ts","../../../node_modules/src/util/applyMixins.ts","../../../node_modules/src/testing/ColdObservable.ts","../../../node_modules/src/testing/HotObservable.ts","../../../node_modules/src/scheduler/VirtualTimeScheduler.ts","../../../node_modules/src/testing/TestScheduler.ts","../../../node_modules/src/util/AnimationFrame.ts","../../../node_modules/src/scheduler/AnimationFrameAction.ts","../../../node_modules/src/Rx.ts","../../../node_modules/src/scheduler/animationFrame.ts","../../../node_modules/src/scheduler/AnimationFrameScheduler.ts","../../../node_modules/src/operators/index.ts","~/ng2-ui-auth/src/oauth.service.ts","~/ng2-ui-auth/src/local.service.ts","~/ng2-ui-auth/src/auth.service.ts","~/ng2-ui-auth/src/interceptor.service.ts","~/ng2-ui-auth/src/ng2-ui-auth.module.ts"],"sourcesContent":["import { of } from 'rxjs/observable/of';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nexport class TokenRefreshService  {\n/**\n * @template T\n * @param {?} refreshToken\n * @return {?}\n */\nrequestTokenRefresh<T extends object | string = any>(refreshToken: string): Observable<T> {\n    return of(null);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TokenRefreshService_tsickle_Closure_declarations() {\n/** @type {?} */\nTokenRefreshService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTokenRefreshService.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","// ngc (Tsickle) doesn't support typescript 2.4 string enums in libraries yet, using consts as a workarount\nexport const /** @type {?} */ NONE = 'none';\nexport const /** @type {?} */ MEMORY = 'memory';\nexport const /** @type {?} */ LOCAL_STORAGE = 'localStorage';\nexport const /** @type {?} */ SESSION_STORAGE = 'sessionStorage';\nexport const /** @type {?} */ COOKIE = 'cookie';\nexport const /** @type {?} */ SESSION_COOKIE = 'sessionCookie';\n\nexport type StorageType = typeof NONE | typeof MEMORY\n    | typeof LOCAL_STORAGE | typeof SESSION_STORAGE\n    | typeof COOKIE | typeof SESSION_COOKIE;\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\n/**\n * Created by Ron on 17/12/2015.\n * @param {?} baseUrl\n * @param {?} url\n * @return {?}\n */\nexport function joinUrl(baseUrl: string, url: string) {\n    if (/^(?:[a-z]+:)?\\/\\//i.test(url)) {\n        return url;\n    }\n\n    let /** @type {?} */ joined = [baseUrl, url].join('/');\n\n    let /** @type {?} */ normalize = function (str) {\n        return str\n            .replace(/[\\/]+/g, '/')\n            .replace(/\\/\\?/g, '?')\n            .replace(/\\/\\#/g, '#')\n            .replace(/\\:\\//g, '://');\n    };\n\n    return normalize(joined);\n}\n/**\n * @param {?} obj1\n * @param {?} obj2\n * @return {?}\n */\nexport function deepMerge(obj1: object, obj2: object): any {\n    let /** @type {?} */ result = {};\n    for (let /** @type {?} */ i in obj1) {\n        if (obj1.hasOwnProperty(i)) {\n            if ((i in obj2) && (typeof obj1[i] === 'object') && (i !== null)) {\n                result[i] = deepMerge(obj1[i], obj2[i]);\n            } else {\n                result[i] = obj1[i];\n            }\n        }\n    }\n    for (let /** @type {?} */ i in obj2) {\n        if (obj2.hasOwnProperty(i)) {\n            if (i in result) {\n                continue;\n            }\n            result[i] = obj2[i];\n        }\n\n    }\n    return result;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function buildQueryString(obj: object) {\n    return Object\n        .keys(obj)\n        .map((key) => !!obj[key] ? `${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}` : key)\n        .join('&');\n}\n/**\n * @param {?=} w\n * @return {?}\n */\nexport function getWindowOrigin(w = window) {\n    try {\n        if (!w || !w.location) {\n            return null;\n        }\n        if (!w.location.origin) {\n            return `${w.location.protocol}//${w.location.hostname}${w.location.port ? ':' + w.location.port : ''}`;\n        }\n        return w.location.origin;\n    } catch ( /** @type {?} */error) {\n        return null;\n        // ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\n        // error instanceof DOMException && error.name === 'SecurityError'\n    }\n}","import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { LOCAL_STORAGE, StorageType } from './storage-type.enum';\nimport { getWindowOrigin } from './utils';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport const CONFIG_OPTIONS = new InjectionToken<any>('config.options');\n\nexport interface IPopupOptions {\n    width?: number;\n    height?: number;\n    left?: number;\n    top?: number;\n    visibleToolbar?: boolean;\n}\n\nexport interface IOauth1Options {\n    url?: string;\n    name?: string;\n    redirectUri?: string;\n    popupOptions?: IPopupOptions;\n    authorizationEndpoint?: string;\n    oauthType?: '1.0';\n    method?: string;\n}\n\nexport interface IOauth2Options {\n    url?: string;\n    name?: string;\n    redirectUri?: string;\n    popupOptions?: IPopupOptions;\n    authorizationEndpoint?: string;\n    oauthType?: '2.0';\n    method?: string;\n    responseType?: string;\n    clientId?: string;\n    additionalUrlParams?: {\n        [paramName: string]: string | (() => string) | null | undefined;\n    };\n    scopeDelimiter?: string;\n    scope?: string[];\n    state?: string | (() => string);\n}\n\nexport interface IProviders {\n    [provider: string]: IOauth2Options | IOauth1Options;\n}\n\nexport interface Tokens {\n    accessToken: string;\n    refreshToken?: string;\n}\n\nexport interface IConfigOptions {\n    tokenRoot: string | null;\n    cordova: boolean | null;\n    baseUrl: string;\n    loginUrl: string;\n    signupUrl: string;\n    unlinkUrl: string;\n    tokenName: string;\n    refreshTokenName: string;\n    tokenSeparator: string;\n    tokenPrefix: string;\n    authToken: string;\n    authHeader: string;\n    storageType: StorageType;\n    providers: IProviders;\n    withCredentials: boolean;\n    resolveToken: (response: any, config: IConfigOptions) => Tokens;\n}\n\nexport interface IPartialConfigOptions { // = Partial<IConfigOptions\n    tokenRoot?: string | null;\n    cordova?: boolean | null;\n    baseUrl?: string;\n    loginUrl?: string;\n    signupUrl?: string;\n    unlinkUrl?: string;\n    refreshTokenName?: string;\n    tokenName?: string;\n    tokenSeparator?: string;\n    tokenPrefix?: string;\n    authToken?: string;\n    authHeader?: string;\n    storageType?: StorageType;\n    providers?: IProviders;\n    withCredentials?: boolean;\n    resolveToken?: (response: any, config: IConfigOptions) => Tokens;\n}\n\nexport const /** @type {?} */ defaultOptions: IConfigOptions = {\n    withCredentials: false,\n    tokenRoot: null,\n    baseUrl: '/',\n    loginUrl: '/auth/login',\n    signupUrl: '/auth/signup',\n    unlinkUrl: '/auth/unlink/',\n    tokenName: 'token',\n    refreshTokenName: 'refresh_token',\n    tokenSeparator: '_',\n    tokenPrefix: 'ng2-ui-auth',\n    authHeader: 'Authorization',\n    authToken: 'Bearer',\n    storageType: LOCAL_STORAGE,\n    cordova: null,\n    resolveToken: (response: any, config: IConfigOptions) => {\n        const /** @type {?} */ accessToken: string | { [key: string]: string } | null | undefined = response &&\n            (response.access_token || response.token || response.data);\n        if (!accessToken) {\n            // console.warn('No token found');\n            return null;\n        }\n        if (typeof accessToken === 'string') {\n            const /** @type {?} */ refreshToken = response[config.refreshTokenName];\n            return { accessToken: accessToken, refreshToken: refreshToken };\n        }\n        if (typeof accessToken !== 'object') {\n            // console.warn('No token found');\n            return null;\n        }\n        const /** @type {?} */ tokenRootData = config.tokenRoot && config.tokenRoot\n            .split('.')\n            .reduce(\n            (o: any, x: any) => {\n                return o[x];\n            },\n            accessToken);\n        const /** @type {?} */ token = tokenRootData ? tokenRootData[config.tokenName] : accessToken[config.tokenName];\n        const /** @type {?} */ refreshToken = tokenRootData ? tokenRootData[config.refreshTokenName] : accessToken[config.refreshTokenName];\n\n        if (token) {\n            return { accessToken: token, refreshToken: refreshToken };\n        }\n        // const tokenPath = this.tokenRoot ? this.tokenRoot + '.' + this.tokenName : this.tokenName;\n        // console.warn('Expecting a token named \"' + tokenPath);\n        return null;\n    },\n    providers: {\n        facebook: {\n            name: 'facebook',\n            url: '/auth/facebook',\n            redirectUri: `${getWindowOrigin()}/`,\n            authorizationEndpoint: 'https://www.facebook.com/v2.5/dialog/oauth',\n            additionalUrlParams: {\n                display: 'popup',\n            },\n            scope: ['email'],\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: { width: 580, height: 400 },\n        },\n        google: {\n            name: 'google',\n            url: '/auth/google',\n            authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\n            additionalUrlParams: {\n                'display': 'popup',\n                'prompt': undefined,\n                'login_hint': undefined,\n                'access_type': undefined,\n                'include_granted_scopes': undefined,\n                'openid.realm': undefined,\n                'hd': undefined,\n            },\n            scope: ['openid', 'profile', 'email'],\n            scopeDelimiter: ' ',\n            oauthType: '2.0',\n            popupOptions: { width: 452, height: 633 },\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2)),\n        },\n        github: {\n            name: 'github',\n            url: '/auth/github',\n            authorizationEndpoint: 'https://github.com/login/oauth/authorize',\n            scope: ['user:email'],\n            scopeDelimiter: ' ',\n            oauthType: '2.0',\n            popupOptions: { width: 1020, height: 618 },\n        },\n        instagram: {\n            name: 'instagram',\n            url: '/auth/instagram',\n            authorizationEndpoint: 'https://api.instagram.com/oauth/authorize',\n            scope: ['basic'],\n            scopeDelimiter: '+',\n            oauthType: '2.0',\n        },\n        linkedin: {\n            name: 'linkedin',\n            url: '/auth/linkedin',\n            authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\n            scope: ['r_emailaddress'],\n            scopeDelimiter: ' ',\n            oauthType: '2.0',\n            popupOptions: { width: 527, height: 582 },\n            state: 'STATE',\n        },\n        twitter: {\n            name: 'twitter',\n            url: '/auth/twitter',\n            authorizationEndpoint: 'https://api.twitter.com/oauth/authenticate',\n            oauthType: '1.0',\n            popupOptions: { width: 495, height: 645 },\n        },\n        twitch: {\n            name: 'twitch',\n            url: '/auth/twitch',\n            authorizationEndpoint: 'https://api.twitch.tv/kraken/oauth2/authorize',\n            scope: ['user_read'],\n            scopeDelimiter: ' ',\n            additionalUrlParams: {\n                display: 'popup',\n            },\n            oauthType: '2.0',\n            popupOptions: { width: 500, height: 560 },\n        },\n        live: {\n            name: 'live',\n            url: '/auth/live',\n            authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\n            additionalUrlParams: {\n                display: 'popup',\n            },\n            scope: ['wl.emails'],\n            scopeDelimiter: ' ',\n            oauthType: '2.0',\n            popupOptions: { width: 500, height: 560 },\n        },\n        yahoo: {\n            name: 'yahoo',\n            url: '/auth/yahoo',\n            authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\n            scope: [],\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: { width: 559, height: 519 },\n        },\n        bitbucket: {\n            name: 'bitbucket',\n            url: '/auth/bitbucket',\n            authorizationEndpoint: 'https://bitbucket.org/site/oauth2/authorize',\n            redirectUri: `${getWindowOrigin()}/`,\n            scope: ['email'],\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: { width: 1028, height: 529 },\n        },\n        spotify: {\n            name: 'spotify',\n            url: '/auth/spotify',\n            authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n            scope: ['', 'user-read-email'],\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: { width: 500, height: 530 },\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2)),\n        },\n    },\n};\nexport class ConfigService {\npublic options: IConfigOptions;\n/**\n * @param {?} options\n */\nconstructor( options: IPartialConfigOptions) {\n        this.options = {\n            ...defaultOptions,\n            ...options,\n            providers: {\n                ...options.providers,\n                ...Object\n                    .keys(defaultOptions.providers)\n                    .concat(Object.keys(options.providers || {}))\n                    .map((key) => options.providers && options.providers[key]\n                        ? { [key]: { ...defaultOptions.providers[key], ...options.providers[key] } }\n                        : { [key]: defaultOptions.providers[key] })\n                    .reduce((acc, next) => ({ ...acc, ...next }), {}),\n            },\n        } as IConfigOptions;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [CONFIG_OPTIONS, ] }, ]},\n];\n}\n\nfunction ConfigService_tsickle_Closure_declarations() {\n/** @type {?} */\nConfigService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConfigService.ctorParameters;\n/** @type {?} */\nConfigService.prototype.options;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigService, IConfigOptions } from './config.service';\nimport { StorageType, MEMORY, COOKIE, SESSION_COOKIE, LOCAL_STORAGE, SESSION_STORAGE, NONE } from './storage-type.enum';\n/**\n * @abstract\n */\nexport abstract class StorageService {\n/**\n * @abstract\n * @param {?} storageType\n * @return {?}\n */\nupdateStorageType(storageType: StorageType) {}\n/**\n * @abstract\n * @param {?} key\n * @return {?}\n */\nget(key: string) {}\n/**\n * @abstract\n * @param {?} key\n * @param {?} value\n * @param {?} date\n * @return {?}\n */\nset(key: string, value: string, date: string) {}\n/**\n * @abstract\n * @param {?} key\n * @return {?}\n */\nremove(key: string) {}\n}\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class BrowserStorageService extends StorageService {\nprivate store: { [key: string]: string } = {};\nprivate storageType: StorageType = MEMORY;\n/**\n * @param {?} config\n */\nconstructor(private config: ConfigService) {\n        super();\n        if (!this.updateStorageType(config.options.storageType)) {\n            console.warn(config.options.storageType + ' is not available.');\n        }\n    }\n/**\n * @param {?} storageType\n * @return {?}\n */\npublic updateStorageType(storageType: StorageType) {\n        const /** @type {?} */ isStorageAvailable = this.checkIsStorageAvailable(storageType);\n        if (!isStorageAvailable) {\n            return false;\n        }\n        this.storageType = storageType;\n        return true;\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic async get(key: string) {\n        switch (this.storageType) {\n            case COOKIE:\n            case SESSION_COOKIE:\n                return this.getCookie(key);\n            case LOCAL_STORAGE:\n            case SESSION_STORAGE:\n                return window[this.storageType].getItem(key);\n            case MEMORY:\n                return this.store[key];\n            case NONE:\n            default:\n                return null;\n        }\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?} date\n * @return {?}\n */\npublic async set(key: string, value: string, date: string) {\n        switch (this.storageType) {\n            case COOKIE:\n            case SESSION_COOKIE:\n                this.setCookie(key, value, this.storageType === COOKIE ? date : '');\n                break;\n            case LOCAL_STORAGE:\n            case SESSION_STORAGE:\n                window[this.storageType].setItem(key, value);\n                break;\n            case MEMORY:\n                this.store[key] = value;\n                break;\n            case NONE:\n            default:\n                break;\n        }\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic async remove(key: string) {\n        switch (this.storageType) {\n            case COOKIE:\n            case SESSION_COOKIE:\n                this.removeCookie(key);\n                break;\n            case LOCAL_STORAGE:\n            case SESSION_STORAGE:\n                window[this.storageType].removeItem(key);\n                break;\n            case MEMORY:\n                delete this.store[key];\n                break;\n            case NONE:\n            default:\n                break;\n        }\n    }\n/**\n * @param {?} storageType\n * @return {?}\n */\nprivate checkIsStorageAvailable(storageType: StorageType) {\n        switch (storageType) {\n            case COOKIE:\n            case SESSION_COOKIE:\n                return this.isCookieStorageAvailable();\n            case LOCAL_STORAGE:\n            case SESSION_STORAGE:\n                return this.isWindowStorageAvailable(storageType);\n            case NONE:\n            case MEMORY:\n                return true;\n            default:\n                return false;\n        }\n    }\n/**\n * @param {?} storageType\n * @return {?}\n */\nprivate isWindowStorageAvailable(storageType: typeof SESSION_STORAGE | typeof LOCAL_STORAGE) {\n        try {\n            const /** @type {?} */ supported = window && storageType in window && window[storageType] !== null;\n\n            if (supported) {\n                const /** @type {?} */ key = Math.random().toString(36).substring(7);\n                window[storageType].setItem(key, '');\n                window[storageType].removeItem(key);\n            }\n\n            return supported;\n        } catch ( /** @type {?} */e) {\n            return false;\n        }\n    }\n/**\n * @return {?}\n */\nprivate isCookieStorageAvailable() {\n        try {\n            const /** @type {?} */ supported = document && 'cookie' in document;\n\n            if (supported) {\n                const /** @type {?} */ key = Math.random().toString(36).substring(7);\n                this.setCookie(key, 'test', new Date(Date.now() + 60 * 1000).toUTCString());\n                const /** @type {?} */ value = this.getCookie(key);\n                this.removeCookie(key);\n                return value === 'test';\n            }\n            return false;\n        } catch ( /** @type {?} */e) {\n            return false;\n        }\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?=} expires\n * @param {?=} path\n * @return {?}\n */\nprivate setCookie(key: string, value: string, expires = '', path = '/') {\n        document.cookie = `${key}=${value}${expires ? `; expires=${expires}` : ''}; path=${path}`;\n    }\n/**\n * @param {?} key\n * @param {?=} path\n * @return {?}\n */\nprivate removeCookie(key: string, path = '/') {\n        this.setCookie(key, '', new Date(0).toUTCString(), path);\n    }\n/**\n * @param {?} key\n * @return {?}\n */\nprivate getCookie(key: string) {\n        return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)${key}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), '$1');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConfigService, },\n];\n}\n\nfunction BrowserStorageService_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserStorageService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserStorageService.ctorParameters;\n/** @type {?} */\nBrowserStorageService.prototype.store;\n/** @type {?} */\nBrowserStorageService.prototype.storageType;\n/** @type {?} */\nBrowserStorageService.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { TokenRefreshService } from './token.refresh.service';\n/**\n * Created by Ron on 17/12/2015.\n */\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subscriber } from 'rxjs/Subscriber';\nimport { Injectable } from '@angular/core';\nimport { ConfigService, Tokens } from './config.service';\nimport { StorageService } from './storage.service';\nimport { StorageType } from './storage-type.enum';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class SharedService {\npublic tokenName = this.config.options.tokenPrefix\n        ? [this.config.options.tokenPrefix, this.config.options.tokenName].join(this.config.options.tokenSeparator)\n        : this.config.options.tokenName;\npublic refreshTokenName = this.config.options.tokenPrefix\n        ? [this.config.options.tokenPrefix, this.config.options.refreshTokenName].join(this.config.options.tokenSeparator)\n        : this.config.options.refreshTokenName;\n/**\n * @param {?} storage\n * @param {?} config\n * @param {?} tokenRefreshService\n */\nconstructor(\nprivate storage: StorageService,\nprivate config: ConfigService,\nprivate tokenRefreshService: TokenRefreshService) { }\n/**\n * @return {?}\n */\npublic async getRefreshToken() {\n        let /** @type {?} */ refreshToken = await this.storage.get(this.refreshTokenName);\n        return refreshToken;\n    }\n/**\n * @return {?}\n */\npublic async getToken() {\n        let /** @type {?} */ token = await this.storage.get(this.tokenName);\n        return token;\n    }\n/**\n * @param {?=} token\n * @return {?}\n */\npublic async getPayload(token?: string) {\n        token = token || await this.getToken();\n        if (!token) {\n          token = await this.getToken();\n        }\n\n        if (token && token.split('.').length === 3) {\n            try {\n                const /** @type {?} */ base64Url = token.split('.')[1];\n                const /** @type {?} */ base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n                return JSON.parse(this.b64DecodeUnicode(base64));\n            } catch ( /** @type {?} */e) {\n                return undefined;\n            }\n        }\n    }\n/**\n * @param {?} response\n * @return {?}\n */\npublic async setToken(response: string | object) {\n        if (!response) {\n            // console.warn('Can\\'t set token without passing a value');\n            return null;\n        }\n\n        let /** @type {?} */ tokens: Tokens;\n        if (typeof response === 'string') {\n            tokens = {accessToken: response};\n        } else {\n            tokens = this.config.options.resolveToken(response, this.config.options);\n        }\n\n        if (tokens.accessToken) {\n            const /** @type {?} */ expDate = await this.getExpirationDate(tokens.accessToken);\n            await this.storage.set(this.tokenName, tokens.accessToken, expDate ? expDate.toUTCString() : '');\n        }\n\n        if (tokens.refreshToken) {\n            const /** @type {?} */ expDate = await this.getExpirationDate(tokens.refreshToken);\n            console.debug(`refreshToken exp = ${expDate}`);\n            await this.storage.set(this.refreshTokenName, tokens.refreshToken, expDate ? expDate.toUTCString() : '');\n        }\n\n        return tokens;\n    }\n/**\n * @return {?}\n */\npublic async removeToken() {\n        await this.storage.remove(this.tokenName);\n    }\n/**\n * @param {?=} token\n * @return {?}\n */\npublic async isAuthenticated(token?: string):Promise<boolean> {\n        token = token || await this.getToken();\n\n        // a token is present\n            if (token && await this.isValidToken(token)) {\n                return true;\n            }\n\n            let /** @type {?} */ refreshToken = await this.getRefreshToken();\n            if (refreshToken) {\n                console.debug('refresh token found');\n                if (await this.isValidToken(refreshToken)) {\n                    return await new Promise<boolean>((resolve, reject) => {\n                        this.tokenRefreshService.requestTokenRefresh<any>(refreshToken).subscribe(async (response) => {\n                            const /** @type {?} */ tokens = await this.setToken(response);\n                            if (tokens) {\n                                resolve(await this.isValidToken(tokens.accessToken));\n                            } else resolve(false);\n                        }\n                        , (e) => reject(e));\n                    });\n                }\n                await this.storage.remove(this.refreshTokenName);\n            }\n\n            if (token) await this.storage.remove(this.tokenName);\n\n            return false;\n    }\n/**\n * @param {?} token\n * @return {?}\n */\nasync isValidToken(token: string):Promise<boolean> {\n        // token with a valid JWT format XXX.YYY.ZZZ\n        if (token.split('.').length === 3) {\n            // could be a valid JWT or an access token with the same format\n            try {\n                const /** @type {?} */ base64Url = token.split('.')[1];\n                const /** @type {?} */ base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n                const /** @type {?} */ exp = JSON.parse(this.b64DecodeUnicode(base64)).exp;\n                // jwt with an optional expiration claims\n                if (exp) {\n                    const /** @type {?} */ isExpired = Math.round(new Date().getTime() / 1000) >= exp;\n                    if (isExpired) {\n                        // fail: Expired token\n                        return false;\n                    } else {\n                        // pass: Non-expired token\n                        return true;\n                    }\n                }\n            } catch ( /** @type {?} */e) {\n                // pass: Non-JWT token that looks like JWT\n                return true;\n            }\n        }\n        // pass: All other tokens\n        return true;\n    }\n/**\n * @param {?=} token\n * @return {?}\n */\npublic async getExpirationDate(token?: string) {\n        token = token || await this.getToken();\n\n        const /** @type {?} */ payload = await this.getPayload(token);\n        if (payload && payload.exp && Math.round(new Date().getTime() / 1000) < payload.exp) {\n            const /** @type {?} */ date = new Date(0);\n            date.setUTCSeconds(payload.exp);\n            return date;\n        }\n        return null;\n    }\n/**\n * @return {?}\n */\npublic logout(): Observable<any> {\n        return Observable.create((observer: Subscriber<any>) => {\n            this.storage.remove(this.tokenName).then(() => {\n              observer.next();\n              observer.complete();\n            });\n        });\n    }\n/**\n * @param {?} type\n * @return {?}\n */\npublic setStorageType(type: StorageType) {\n        return this.storage.updateStorageType(type);\n    }\n/**\n * @param {?} str\n * @return {?}\n */\nprivate b64DecodeUnicode(str) {\n        return decodeURIComponent(\n            Array.prototype.map.call(atob(str),\n            c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2),\n        ).join(''));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: StorageService, },\n{type: ConfigService, },\n{type: TokenRefreshService, },\n];\n}\n\nfunction SharedService_tsickle_Closure_declarations() {\n/** @type {?} */\nSharedService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSharedService.ctorParameters;\n/** @type {?} */\nSharedService.prototype.tokenName;\n/** @type {?} */\nSharedService.prototype.refreshTokenName;\n/** @type {?} */\nSharedService.prototype.storage;\n/** @type {?} */\nSharedService.prototype.config;\n/** @type {?} */\nSharedService.prototype.tokenRefreshService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { deepMerge, getWindowOrigin } from './utils';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { ConfigService, IPopupOptions, IOauth2Options, IOauth1Options } from './config.service';\nimport { switchMap, take, map, takeWhile, delay } from 'rxjs/operators';\nimport { interval } from 'rxjs/observable/interval';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { _throw } from 'rxjs/observable/throw';\nimport { empty } from 'rxjs/observable/empty';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class PopupService {\n/**\n * @param {?} url\n * @param {?} options\n * @param {?} cordova\n * @return {?}\n */\npublic open(url: string, options: IOauth2Options | IOauth1Options, cordova: boolean | null) {\n        const /** @type {?} */ stringifiedOptions = this.stringifyOptions(this.prepareOptions(options.popupOptions));\n        const /** @type {?} */ UA = window.navigator.userAgent;\n        cordova = cordova === null ? this.isCordovaApp() : cordova;\n        const /** @type {?} */ windowName = cordova ? '_blank' : options.name;\n\n        const /** @type {?} */ popupWindow = window.open(url, windowName, stringifiedOptions);\n\n        if (popupWindow && popupWindow.focus) {\n            popupWindow.focus();\n        }\n\n        return cordova\n            ? this.eventListener(popupWindow, options.redirectUri || getWindowOrigin())\n            : this.pollPopup(popupWindow, options.redirectUri || getWindowOrigin());\n    }\n/**\n * @param {?} popupWindow\n * @param {?} redirectUri\n * @return {?}\n */\npublic eventListener(popupWindow: Window, redirectUri: string) {\n        if (!popupWindow) {\n            throw new Error('Popup was not created');\n        }\n        return merge(\n            fromEvent<Event>(popupWindow, 'exit').pipe(\n                delay(100),\n                map(() => { throw new Error('Authentication Canceled'); }),\n            ),\n            fromEvent(popupWindow, 'loadstart'),\n        ).pipe(\n            switchMap((event: Event & { url: string }) => {\n                if (!popupWindow || popupWindow.closed) {\n                    return Observable.throw(new Error('Authentication Canceled'));\n                }\n                if (event.url.indexOf(redirectUri) !== 0) {\n                    return empty();\n                }\n\n                const /** @type {?} */ parser = document.createElement('a');\n                parser.href = event.url;\n\n                if (parser.search || parser.hash) {\n                    const /** @type {?} */ queryParams = parser.search.substring(1).replace(/\\/$/, '');\n                    const /** @type {?} */ hashParams = parser.hash.substring(1).replace(/\\/$/, '');\n                    const /** @type {?} */ hash = this.parseQueryString(hashParams);\n                    const /** @type {?} */ qs = this.parseQueryString(queryParams);\n                    const /** @type {?} */ allParams = { ...qs, ...hash };\n\n                    popupWindow.close();\n\n                    if (allParams.error) {\n                        throw allParams.error;\n                    } else {\n                        return of(allParams);\n                    }\n                }\n                return empty();\n            }),\n            take(1),\n        );\n    }\n/**\n * @param {?} popupWindow\n * @param {?} redirectUri\n * @return {?}\n */\npublic pollPopup(popupWindow: Window, redirectUri: string) {\n        return interval(50)\n            .pipe(\n            switchMap(() => {\n                if (!popupWindow || popupWindow.closed) {\n                    return _throw(new Error('Authentication Canceled'));\n                }\n\n                const /** @type {?} */ popupWindowOrigin = getWindowOrigin(popupWindow);\n\n                if (popupWindowOrigin &&\n                    (redirectUri.indexOf(popupWindowOrigin) === 0 || popupWindowOrigin.indexOf(redirectUri) === 0) &&\n                    (popupWindow.location.search || popupWindow.location.hash)) {\n                    const /** @type {?} */ queryParams = popupWindow.location.search.substring(1).replace(/\\/$/, '');\n                    const /** @type {?} */ hashParams = popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\n                    const /** @type {?} */ hash = this.parseQueryString(hashParams);\n                    const /** @type {?} */ qs = this.parseQueryString(queryParams);\n                    popupWindow.close();\n                    const /** @type {?} */ allParams = { ...qs, ...hash };\n                    if (allParams.error) {\n                        throw allParams.error;\n                    } else {\n                        return of(allParams);\n                    }\n                }\n                return empty();\n            }),\n            take(1),\n        );\n    }\n/**\n * @param {?=} options\n * @return {?}\n */\nprivate prepareOptions(options?: IPopupOptions) {\n        options = options || {};\n        const /** @type {?} */ width = options.width || 500;\n        const /** @type {?} */ height = options.height || 500;\n        return {\n            width,\n            height,\n            left: window.screenX + ((window.outerWidth - width) / 2),\n            top: window.screenY + ((window.outerHeight - height) / 2.5),\n            toolbar: options.visibleToolbar ? 'yes' : 'no',\n            ...options,\n        };\n    }\n/**\n * @param {?} options\n * @return {?}\n */\nprivate stringifyOptions(options: { [index: string]: string | number | boolean | null | undefined }) {\n        return Object.keys(options)\n            .map((key) => options[key] === null || options[key] === undefined\n                ? key\n                : key + '=' + options[key],\n        ).join(',');\n    }\n/**\n * @param {?} joinedKeyValue\n * @return {?}\n */\nprivate parseQueryString(joinedKeyValue: string): any {\n        let /** @type {?} */ key;\n        let /** @type {?} */ value;\n        return joinedKeyValue.split('&').reduce(\n            (obj, keyValue) => {\n                if (keyValue) {\n                    value = keyValue.split('=');\n                    key = decodeURIComponent(value[0]);\n                    obj[key] = typeof value[1] !== 'undefined' ? decodeURIComponent(value[1]) : true;\n                }\n                return obj;\n            }, /** @type {?} */((\n            {} as { [k: string]: string | true })));\n    }\n/**\n * @return {?}\n */\nprivate isCordovaApp() {\n        return !!(window && (\n            ( /** @type {?} */((window as any))).cordova ||\n            window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('CriOS') > -1\n        ));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PopupService_tsickle_Closure_declarations() {\n/** @type {?} */\nPopupService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPopupService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { IOauthService } from './oauth-service.interface';\nimport { Injectable } from '@angular/core';\nimport { PopupService } from './popup.service';\nimport { joinUrl, buildQueryString } from './utils';\nimport { ConfigService, IOauth1Options } from './config.service';\nimport { Observable } from 'rxjs/Observable';\nimport { switchMap } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class Oauth1Service implements IOauthService {\n/**\n * @param {?} http\n * @param {?} popup\n * @param {?} config\n */\nconstructor(\n        protected http: HttpClient,\n        protected popup: PopupService,\n        protected config: ConfigService,\n    ) { }\n/**\n * @template T\n * @param {?} oauthOptions\n * @param {?} userData\n * @return {?}\n */\nopen<T extends object | string = any>(oauthOptions: IOauth1Options, userData: object): Observable<T> {\n        const /** @type {?} */ serverUrl = this.config.options.baseUrl\n            ? joinUrl(this.config.options.baseUrl, oauthOptions.url)\n            : oauthOptions.url;\n\n        return this.http.post<object>(serverUrl, oauthOptions).pipe(\n            switchMap((authorizationData) => this.popup.open(\n                [oauthOptions.authorizationEndpoint, buildQueryString(authorizationData)].join('?'),\n                oauthOptions,\n                this.config.options.cordova,\n            ), (authorizationData, oauthData) => ({ authorizationData, oauthData })),\n            switchMap(({ authorizationData, oauthData }) => this.exchangeForToken<T>(oauthOptions, authorizationData, oauthData, userData)),\n        );\n    }\n/**\n * @template T\n * @param {?} oauthOptions\n * @param {?} authorizationData\n * @param {?} oauthData\n * @param {?} userData\n * @return {?}\n */\nprotected exchangeForToken<T>(oauthOptions: IOauth1Options, authorizationData: object, oauthData: object, userData: object) {\n        const /** @type {?} */ body = { authorizationData, oauthData, userData };\n        const { withCredentials, baseUrl } = this.config.options;\n        const { method = 'POST', url } = oauthOptions;\n        const /** @type {?} */ exchangeForTokenUrl = baseUrl ? joinUrl(baseUrl, url) : url;\n        return this.http.request<T>(method, exchangeForTokenUrl, { body, withCredentials })\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: PopupService, },\n{type: ConfigService, },\n];\n}\n\nfunction Oauth1Service_tsickle_Closure_declarations() {\n/** @type {?} */\nOauth1Service.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOauth1Service.ctorParameters;\n/** @type {?} */\nOauth1Service.prototype.http;\n/** @type {?} */\nOauth1Service.prototype.popup;\n/** @type {?} */\nOauth1Service.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { IOauthService } from './oauth-service.interface';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { joinUrl, deepMerge, buildQueryString, getWindowOrigin } from './utils';\nimport { ConfigService, IOauth2Options } from './config.service';\nimport { PopupService } from './popup.service';\nimport { StorageService } from './storage.service';\nimport { HttpClient } from '@angular/common/http';\nimport { switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs/observable/of';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class Oauth2Service implements IOauthService {\n/**\n * @param {?} http\n * @param {?} popup\n * @param {?} config\n */\nconstructor(\n        protected http: HttpClient,\n        protected popup: PopupService,\n        protected config: ConfigService) {\n    }\n/**\n * @template T\n * @param {?} oauthOptions\n * @param {?} userData\n * @return {?}\n */\nopen<T extends object | string = any>(oauthOptions: IOauth2Options, userData: object): Observable<T> {\n        const /** @type {?} */ authorizationData = this.getAuthorizationData(oauthOptions);\n        const /** @type {?} */ url = [oauthOptions.authorizationEndpoint, buildQueryString(authorizationData)].join('?');\n        return this.popup.open(url, oauthOptions, this.config.options.cordova).pipe(\n            switchMap((oauthData: any) => {\n                // when no server URL provided, return popup params as-is.\n                // this is for a scenario when someone wishes to opt out from\n                // satellizer's magic by doing authorization code exchange and\n                // saving a token manually.\n                if (oauthOptions.responseType === 'token' || !oauthOptions.url) {\n                    return of(oauthData);\n                }\n\n                if (oauthData.state && oauthData.state !== authorizationData.state) {\n                    throw new Error('OAuth \"state\" mismatch');\n                }\n                return this.exchangeForToken<T>(oauthOptions, authorizationData, oauthData, userData);\n            }),\n        );\n    }\n/**\n * @template T\n * @param {?} options\n * @param {?} authorizationData\n * @param {?} oauthData\n * @param {?} userData\n * @return {?}\n */\nprotected exchangeForToken<T>(options: IOauth2Options, authorizationData: object, oauthData: object, userData: object) {\n        const /** @type {?} */ body = { authorizationData, oauthData, userData };\n        const { baseUrl, withCredentials } = this.config.options;\n        const { url, method = 'POST' } = options;\n        const /** @type {?} */ exchangeForTokenUrl = baseUrl ? joinUrl(baseUrl, url) : url;\n        return this.http.request<T>(method, exchangeForTokenUrl, { body, withCredentials });\n    }\n/**\n * @param {?} options\n * @return {?}\n */\nprotected getAuthorizationData(options: IOauth2Options) {\n        const {\n            responseType = 'code',\n            clientId,\n            redirectUri = getWindowOrigin() || '',\n            scopeDelimiter = ',',\n            scope,\n            state,\n            additionalUrlParams,\n        } = options;\n        const /** @type {?} */ resolvedState = typeof state === 'function' ? state() : state;\n        return [\n            ['response_type', responseType],\n            ['client_id', clientId],\n            ['redirect_uri', redirectUri],\n            ...state ? [['state', resolvedState]] : [],\n            ...scope ? [['scope', scope.join(scopeDelimiter)]] : [],\n            ...additionalUrlParams\n                ? Object\n                    .keys(additionalUrlParams)\n                    .map((key) => {\n                        const /** @type {?} */ value: string | (() => string) | null | undefined =\n                            ( /** @type {?} */((additionalUrlParams as any)))[key];\n                        if (typeof value === 'string') {\n                            return [key, value];\n                        } else if (typeof value === 'function') {\n                            return [key, value()];\n                        } else if (value === null) {\n                            return [key, ''];\n                        }\n                        return ['', ''];\n                    })\n                : [],\n        ].filter((_) => !!_[0]).reduce((acc, next) => ({ ...acc, [next[0]]: next[1] }), /** @type {?} */(( {} as { [key: string]: string })));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: PopupService, },\n{type: ConfigService, },\n];\n}\n\nfunction Oauth2Service_tsickle_Closure_declarations() {\n/** @type {?} */\nOauth2Service.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOauth2Service.ctorParameters;\n/** @type {?} */\nOauth2Service.prototype.http;\n/** @type {?} */\nOauth2Service.prototype.popup;\n/** @type {?} */\nOauth2Service.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments, it will return an Observable. If `func` function\n   * calls its callback with one argument, the Observable will emit that value.\n   * If on the other hand callback is called with multiple values, resulting\n   * Observable will emit an array with these arguments.\n   *\n   * It is very important to remember, that input function `func` is not called\n   * when output function is, but rather when Observable returned by output\n   * function is subscribed. This means if `func` makes AJAX request, that request\n   * will be made every time someone subscribes to resulting Observable, but not before.\n   *\n   * Optionally, selector function can be passed to `bindObservable`. That function\n   * takes the same arguments as callback, and returns value\n   * that will be emitted by Observable instead of callback parameters themselves.\n   * Even though by default multiple arguments passed to callback appear in the stream as array,\n   * selector function will be called with arguments directly, just as callback would.\n   * This means you can imagine default selector (when one is not provided explicitly)\n   * as function that aggregates all its arguments into array, or simply returns first argument,\n   * if there is only one.\n   *\n   * Last optional parameter - {@link Scheduler} - can be used to control when call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default subscription to Observable calls `func`\n   * synchronously, but using `Scheduler.async` as last parameter will defer call to input function,\n   * just like wrapping that call in `setTimeout` with time `0` would. So if you use async Scheduler\n   * and call `subscribe` on output Observable, all function calls that are currently executing,\n   * will end before `func` is invoked.\n   *\n   * When it comes to emitting results passed to callback, by default they are emitted\n   * immediately after `func` invokes callback. In particular, if callback is called synchronously,\n   * then subscription to resulting Observable will call `next` function synchronously as well.\n   * If you want to defer that call, using `Scheduler.async` will, again, do the job.\n   * This means that by using `Scheduler.async` you can, in a sense, ensure that `func`\n   * always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that Observable created by output function will always emit only one value\n   * and then complete right after. Even if `func` calls callback multiple times, values from\n   * second and following calls will never appear in the stream. If you need to\n   * listen for multiple calls, you probably want to use {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property), that context will be set\n   * to the same context that output function has at call time. In particular, if `func`\n   * is called as method of some object, in order to preserve proper behaviour,\n   * it is recommended to set context of output function to that object as well,\n   * provided `func` is not already bound.\n   *\n   * If input function calls its callback in \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions without any difference and error parameter\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive array of arguments passed to callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions | SelectorMethodSignature<T>,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options as EventListenerOptions | undefined);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector as ResultFunc<S, T>,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector as ResultFunc<S, T>,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { GenerateObservable } from './GenerateObservable';\n\nexport const generate = GenerateObservable.create;\n","import { Observable } from '../../Observable';\nimport { generate as staticGenerate } from '../../observable/generate';\n\nObservable.generate = staticGenerate;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof staticGenerate;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { mergeAll } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { merge as higherOrder } from '../operators/merge';\n\nexport { mergeStatic } from '../operators/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return higherOrder(...observables)(this) as Observable<R>;\n}\n","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { race as staticRace } from '../../observable/race';\n\nObservable.race = staticRace;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof staticRace;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please note\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { onErrorResumeNextStatic } from '../operators/onErrorResumeNext';\n\nexport const onErrorResumeNext = onErrorResumeNextStatic;\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext as staticOnErrorResumeNext } from '../../observable/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = staticOnErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof staticOnErrorResumeNext;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import {  zipStatic  } from '../operators/zip';\n\nexport const zip = zipStatic;\n","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { map } from '../../operators/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PATCH', url, body, headers });\n};\n\nconst mapResponse = map((x: AjaxResponse, index: number) => x.response);\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return mapResponse(\n    new AjaxObservable<AjaxResponse>({\n      method: 'GET',\n      url,\n      responseType: 'json',\n      headers\n    })\n  );\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout, responseType and withCredentials can be set once the XHR is open\n      if (async) {\n        xhr.timeout = request.timeout;\n        xhr.responseType = request.responseType as any;\n      }\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\nfunction parseXhrResponse(responseType: string, xhr: XMLHttpRequest) {\n  switch (responseType) {\n    case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          return JSON.parse(xhr.responseText || 'null');\n        }\n      case 'xml':\n        return xhr.responseXML;\n      case 'text':\n      default:\n        return  ('response' in xhr) ? xhr.response : xhr.responseText;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let socket$ = Observable.webSocket('ws://localhost:8081');\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket$ = Observable.webSocket({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { buffer as higherOrder } from '../operators/buffer';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return higherOrder(closingNotifier)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferCount as higherOrder } from '../operators/bufferCount';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return higherOrder(bufferSize, startBufferEvery)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { bufferTime as higherOrder } from '../operators/bufferTime';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return higherOrder(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { bufferToggle as higherOrder } from '../operators/bufferToggle';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return higherOrder(openings, closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferWhen as higherOrder } from '../operators/bufferWhen';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return higherOrder(closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { catchError as higherOrder } from '../operators/catchError';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<T | R> {\n  return higherOrder(selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from '../operators/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../Observable';\nimport { combineAll as higherOrder } from '../operators/combineAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { combineLatest as higherOrder } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { concat as higherOrder } from '../operators/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { concatAll as higherOrder } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return mergeMap(project, resultSelector, 1);\n}\n","import { concatMap as higherOrderConcatMap } from '../operators/concatMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return higherOrderConcatMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { concatMap } from './concatMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(\n  innerObservable: Observable<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R> {\n  return concatMap(() => innerObservable, resultSelector);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { concatMapTo as higherOrder } from '../operators/concatMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { count as higherOrder } from '../operators/count';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { dematerialize as higherOrder } from '../operators/dematerialize';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<Notification<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { debounce as higherOrder } from '../operators/debounce';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { debounceTime as higherOrder } from '../operators/debounceTime';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(dueTime, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","\nimport { Observable } from '../Observable';\nimport { defaultIfEmpty as higherOrder } from '../operators/defaultIfEmpty';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return higherOrder<T, R>(defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { delay as higherOrder } from '../operators/delay';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  return higherOrder<T>(delay, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { delayWhen as higherOrder } from '../operators/delayWhen';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  return higherOrder(delayDurationSelector, subscriptionDelay)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../Observable';\nimport { distinct as higherOrder } from '../operators/distinct';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return higherOrder(keySelector, flushes)(this);\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilChanged as higherOrder } from '../operators/distinctUntilChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return higherOrder(compare, keySelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;\nexport function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T> {\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilKeyChanged as higherOrder } from '../operators/distinctUntilKeyChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return higherOrder<T, T>(key, compare)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { tap as higherOrder } from '../operators/tap';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return higherOrder(<any>nextOrObserver, error, complete)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { exhaust as higherOrder } from '../operators/exhaust';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { exhaustMap as higherOrder } from '../operators/exhaustMap';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { expand as higherOrder } from '../operators/expand';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return higherOrder(project, concurrent, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { elementAt as higherOrder } from '../operators/elementAt';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return higherOrder(index, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","\nimport { Observable } from '../Observable';\nimport { filter as higherOrderFilter } from '../operators/filter';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return higherOrderFilter(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { finalize } from '../operators/finalize';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return finalize(callback)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { find as higherOrder } from '../operators/find';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { FindValueOperator } from '../operators/find';\nimport { OperatorFunction } from '../interfaces';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, true, thisArg)) as Observable<any>;\n}\n","import { Observable } from '../Observable';\nimport { findIndex as higherOrder } from '../operators/findIndex';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { first as higherOrder } from '../operators/first';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { groupBy as higherOrder, GroupedObservable } from '../operators/groupBy';\nexport { GroupedObservable };\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return higherOrder(keySelector, elementSelector as any, durationSelector, subjectSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Observable } from '../Observable';\nimport { ignoreElements as higherOrder } from '../operators/ignoreElements';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { isEmpty as higherOrder } from '../operators/isEmpty';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { audit as higherOrder } from '../operators/audit';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { auditTime as higherOrder } from '../operators/auditTime';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(duration, scheduler)(this) as Observable<T>;\n}","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { last as higherOrder } from '../operators/last';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { every as higherOrder } from '../operators/every';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return higherOrder(predicate, thisArg)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Observable } from '../Observable';\nimport { mapTo as higherOrder } from '../operators/mapTo';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { materialize as higherOrder } from '../operators/materialize';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return higherOrder()(this) as Observable<Notification<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n","import { Observable } from '../Observable';\nimport { max as higherOrderMax } from '../operators/max';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMax(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { mergeAll as higherOrder } from '../operators/mergeAll';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): Observable<T> {\n  return higherOrder(concurrent)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  return higherOrderMergeMap(project, <any>resultSelector, concurrent)(this) as Observable<I | R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMapTo as higherOrder } from '../operators/mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(innerObservable, resultSelector as any, concurrent)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { mergeScan as higherOrder } from '../operators/mergeScan';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(accumulator, seed, concurrent)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n","import { Observable } from '../Observable';\nimport { min as higherOrderMin } from '../operators/min';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMin(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { multicast as higherOrder } from '../operators/multicast';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): Observable<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(<any>subjectOrSubjectFactory, selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { observeOn as higherOrder } from '../operators/observeOn';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { onErrorResumeNext as higherOrder } from '../operators/onErrorResumeNext';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...nextSources)(this);\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Observable } from '../Observable';\nimport { pairwise as higherOrder } from '../operators/pairwise';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return higherOrder()(this) as Observable<[T, T]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T, index: number) => boolean,\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) => [\n    filter(predicate, thisArg)(source),\n    filter(not(predicate, thisArg) as any)(source)\n  ] as [Observable<T>, Observable<T>];\n}\n","import { Observable } from '../Observable';\nimport { partition as higherOrder } from '../operators/partition';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Observable } from '../Observable';\nimport { pluck as higherOrder } from '../operators/pluck';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  return higherOrder(...properties)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publish as higherOrder } from '../operators/publish';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: (source: Observable<T>) => Observable<T>): Observable<T>;\nexport function publish<T, R>(this: Observable<T>, selector: (source: Observable<T>) => Observable<R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(selector)(this);\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T):  UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new BehaviorSubject<T>(value))(source) as ConnectableObservable<T>;\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishBehavior as higherOrder } from '../operators/publishBehavior';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<R> | Observable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as Observable<R> | ConnectableObservable<R>;\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishReplay as higherOrder } from '../operators/publishReplay';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler): ConnectableObservable<T>;\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): Observable<T>;\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): Observable<R> | ConnectableObservable<R> {\n\n  return higherOrder<T, R>(bufferSize, windowTime, selectorOrScheduler as any, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishLast as higherOrder } from '../operators/publishLast';\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  //TODO(benlesh): correct type-flow through here.\n  return higherOrder()(this) as ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = <Array<Observable<T>>>observables[0];\n    }\n\n    return source.lift.call(raceStatic<T>(source, ...observables));\n  };\n}","import { Observable } from '../Observable';\nimport { race as higherOrder } from '../operators/race';\n\n// NOTE: to support backwards compatability with 5.4.* and lower\nexport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, observables: Array<Observable<T>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, observables: Array<Observable<T>>): Observable<R>;\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { reduce as higherOrderReduce } from '../operators/reduce';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return higherOrderReduce(accumulator, seed)(this);\n  }\n\n  return higherOrderReduce(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { repeat as higherOrder } from '../operators/repeat';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Observable } from '../Observable';\nimport { repeatWhen as higherOrder } from '../operators/repeatWhen';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { retry as higherOrder } from '../operators/retry';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Observable } from '../Observable';\nimport { retryWhen as higherOrder } from '../operators/retryWhen';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { sample as higherOrder } from '../operators/sample';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { sampleTime as higherOrder } from '../operators/sampleTime';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(period, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { scan as higherOrderScan } from '../operators/scan';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  if (arguments.length >= 2) {\n    return higherOrderScan(accumulator, seed)(this) as Observable<R>;\n  }\n  return higherOrderScan(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { sequenceEqual as higherOrder } from '../operators/sequenceEqual';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return higherOrder(compareTo, comparor)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","import { Observable } from '../Observable';\nimport { share as higherOrder } from '../operators/share';\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { shareReplay as higherOrder } from '../operators/shareReplay';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler):\n  Observable<T> {\n  return higherOrder(bufferSize, windowTime, scheduler)(this) as Observable<T>;\n};","\nimport { Observable } from '../../Observable';\nimport { shareReplay } from '../../operator/shareReplay';\n\nObservable.prototype.shareReplay = shareReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    shareReplay: typeof shareReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { single as higherOrder } from '../operators/single';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skip as higherOrder } from '../operators/skip';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { skipLast as higherOrder } from '../operators/skipLast';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { skipLast } from '../../operator/skipLast';\n\nObservable.prototype.skipLast = skipLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipLast: typeof skipLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipUntil as higherOrder } from '../operators/skipUntil';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipWhile as higherOrder } from '../operators/skipWhile';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(v1: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len === 1) {\n      return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), source);\n    } else if (len > 1) {\n      return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), source);\n    } else {\n      return concatStatic(new EmptyObservable<T>(scheduler), source);\n    }\n  };\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { startWith as higherOrder } from '../operators/startWith';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  return higherOrder(...array)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function subscribeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new SubscribeOnOperator<T>(scheduler, delay));\n  };\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn as higherOrder } from '../operators/subscribeOn';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { OperatorFunction } from '../interfaces';\nimport { Observable } from '../Observable';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<Observable<T>, T> {\n  return switchMap(identity);\n}\n","import { Observable } from '../Observable';\nimport { switchAll as higherOrder } from '../operators/switchAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<Observable<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { switchMap as higherOrderSwitchMap } from '../operators/switchMap';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return higherOrderSwitchMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { switchMapTo as higherOrder } from '../operators/switchMapTo';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { take as higherOrder } from '../operators/take';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { takeLast as higherOrderTakeLast } from '../operators/takeLast';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrderTakeLast(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeUntil as higherOrder } from '../operators/takeUntil';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeWhile as higherOrder } from '../operators/takeWhile';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { throttle as higherOrder, ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>,\n                            durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(durationSelector, config)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\nimport { throttleTime as higherOrder } from '../operators/throttleTime';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>,\n                                duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(duration, scheduler, config)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timeInterval as higherOrder, TimeInterval } from '../operators/timeInterval';\nexport {TimeInterval};\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return higherOrder(scheduler)(this) as Observable<TimeInterval<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { timeout as higherOrder } from '../operators/timeout';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(due, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable, ObservableInput } from '../Observable';\nimport { timeoutWith as higherOrder } from '../operators/timeoutWith';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  return higherOrder(due, withObservable, scheduler)(this as any);\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\nimport { map } from './map';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: IScheduler = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timestamp as higherOrder } from '../operators/timestamp';\nimport { Timestamp } from '../operators/timestamp';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return higherOrder(scheduler)(this) as Observable<Timestamp<T>>;\n}\n","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","\nimport { Observable } from '../Observable';\nimport { toArray as higherOrder } from '../operators/toArray';\n\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return higherOrder()(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { window as higherOrder } from '../operators/window';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return higherOrder(windowBoundaries)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowCount as higherOrder } from '../operators/windowCount';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return higherOrder(windowSize, startWindowEvery)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { windowTime as higherOrder } from '../operators/windowTime';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\n\nexport function windowTime<T>(this: Observable<T>,\n                              windowTimeSpan: number): Observable<Observable<T>> {\n\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return higherOrder(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowToggle as higherOrder } from '../operators/windowToggle';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(openings, closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowWhen as higherOrder } from '../operators/windowWhen';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { withLatestFrom as higherOrder } from '../operators/withLatestFrom';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...args)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { zip as higherOrder } from '../operators/zip';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T>(this: Observable<T>, ...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new ZipOperator(project));\n}\n","import { Observable } from '../Observable';\nimport { zipAll as higherOrder } from '../operators/zipAll';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/shareReplay';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipLast';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operators/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\nexport { pipe } from './util/pipe';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { rxSubscriber } from './symbol/rxSubscriber';\nimport { iterator } from './symbol/iterator';\nimport { observable } from './symbol/observable';\n\nimport * as _operators from './operators';\n\nexport const operators = _operators;\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","export { audit } from './audit';\nexport { auditTime } from './auditTime';\nexport { buffer } from './buffer';\nexport { bufferCount } from './bufferCount';\nexport { bufferTime } from './bufferTime';\nexport { bufferToggle } from './bufferToggle';\nexport { bufferWhen } from './bufferWhen';\nexport { catchError } from './catchError';\nexport { combineAll } from './combineAll';\nexport { combineLatest } from './combineLatest';\nexport { concat } from './concat';\nexport { concatAll } from './concatAll';\nexport { concatMap } from './concatMap';\nexport { concatMapTo } from './concatMapTo';\nexport { count } from './count';\nexport { debounce } from './debounce';\nexport { debounceTime } from './debounceTime';\nexport { defaultIfEmpty } from './defaultIfEmpty';\nexport { delay } from './delay';\nexport { delayWhen } from './delayWhen';\nexport { dematerialize } from './dematerialize';\nexport { distinct } from './distinct';\nexport { distinctUntilChanged } from './distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './distinctUntilKeyChanged';\nexport { elementAt } from './elementAt';\nexport { every } from './every';\nexport { exhaust } from './exhaust';\nexport { exhaustMap } from './exhaustMap';\nexport { expand } from './expand';\nexport { filter } from './filter';\nexport { finalize } from './finalize';\nexport { find } from './find';\nexport { findIndex } from './findIndex';\nexport { first } from './first';\nexport { groupBy } from './groupBy';\nexport { ignoreElements } from './ignoreElements';\nexport { isEmpty } from './isEmpty';\nexport { last } from './last';\nexport { map } from './map';\nexport { mapTo } from './mapTo';\nexport { materialize } from './materialize';\nexport { max } from './max';\nexport { merge } from './merge';\nexport { mergeAll } from './mergeAll';\nexport { mergeMap } from './mergeMap';\nexport { mergeMap as flatMap } from './mergeMap';\nexport { mergeMapTo } from './mergeMapTo';\nexport { mergeScan } from './mergeScan';\nexport { min } from './min';\nexport { multicast } from './multicast';\nexport { observeOn } from './observeOn';\nexport { onErrorResumeNext } from './onErrorResumeNext';\nexport { pairwise } from './pairwise';\nexport { partition } from './partition';\nexport { pluck } from './pluck';\nexport { publish } from './publish';\nexport { publishBehavior } from './publishBehavior';\nexport { publishLast } from './publishLast';\nexport { publishReplay } from './publishReplay';\nexport { race } from './race';\nexport { reduce } from './reduce';\nexport { repeat } from './repeat';\nexport { repeatWhen } from './repeatWhen';\nexport { retry } from './retry';\nexport { retryWhen } from './retryWhen';\nexport { refCount } from './refCount';\nexport { sample } from './sample';\nexport { sampleTime } from './sampleTime';\nexport { scan } from './scan';\nexport { sequenceEqual } from './sequenceEqual';\nexport { share } from './share';\nexport { shareReplay } from './shareReplay';\nexport { single } from './single';\nexport { skip } from './skip';\nexport { skipLast } from './skipLast';\nexport { skipUntil } from './skipUntil';\nexport { skipWhile } from './skipWhile';\nexport { startWith } from './startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './subscribeOn';\nexport { switchAll } from './switchAll';\nexport { switchMap } from './switchMap';\nexport { switchMapTo } from './switchMapTo';\nexport { take } from './take';\nexport { takeLast } from './takeLast';\nexport { takeUntil } from './takeUntil';\nexport { takeWhile } from './takeWhile';\nexport { tap } from './tap';\nexport { throttle } from './throttle';\nexport { throttleTime } from './throttleTime';\nexport { timeInterval } from './timeInterval';\nexport { timeout } from './timeout';\nexport { timeoutWith } from './timeoutWith';\nexport { timestamp } from './timestamp';\nexport { toArray } from './toArray';\nexport { window } from './window';\nexport { windowCount } from './windowCount';\nexport { windowTime } from './windowTime';\nexport { windowToggle } from './windowToggle';\nexport { windowWhen } from './windowWhen';\nexport { withLatestFrom } from './withLatestFrom';\nexport { zip } from './zip';\nexport { zipAll } from './zipAll';\n","import { IOauthService } from './oauth-service.interface';\nimport { StorageService } from './storage.service';\nimport { PopupService } from './popup.service';\nimport { Injectable, Injector, Provider, ReflectiveInjector } from '@angular/core';\nimport { Oauth1Service } from './oauth1.service';\nimport { Oauth2Service } from './oauth2.service';\nimport { SharedService } from './shared.service';\nimport { joinUrl } from './utils';\nimport { ConfigService, IOauth1Options } from './config.service';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { HttpClient, HttpRequest } from '@angular/common/http';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class OauthService {\n    readonly depProviders = [\n        { provide: HttpClient, useValue: this.http },\n        { provide: PopupService, useValue: this.popup },\n        { provide: ConfigService, useValue: this.config },\n    ];\n    readonly deps = [HttpClient, PopupService, ConfigService];\n/**\n * @param {?} http\n * @param {?} shared\n * @param {?} config\n * @param {?} popup\n */\nconstructor(\n        protected http: HttpClient,\n        protected shared: SharedService,\n        protected config: ConfigService,\n        protected popup: PopupService) { }\n/**\n * @template T\n * @param {?} name\n * @param {?=} userData\n * @return {?}\n */\npublic authenticate<T extends object | string>(name: string, userData?: any): Observable<T> {\n        const /** @type {?} */ provider: IOauthService = this.providerOf(name);\n\n        return provider.open<T>(this.config.options.providers[name], userData || {})\n            .pipe(switchMap((response) => {\n                // this is for a scenario when someone wishes to opt out from\n                // satellizer's magic by doing authorization code exchange and\n                // saving a token manually.\n                if (this.config.options.providers[name].url) {\n                    return Observable.from(this.shared.setToken(response)).map(() => response);\n                }\n\n                return Observable.of(response);\n            }));\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprotected providerOf(name: string):IOauthService {\n      return this.config.options.providers[name].oauthType === '1.0'\n        ? Injector.create([\n          ...this.depProviders,\n          { provide: Oauth1Service, deps: this.deps },\n        ]).get(Oauth1Service)\n        : Injector.create([\n          ...this.depProviders,\n          { provide: Oauth2Service, deps: this.deps },\n        ]).get(Oauth2Service);\n    }\n/**\n * @template T\n * @param {?} provider\n * @param {?=} url\n * @param {?=} method\n * @return {?}\n */\npublic unlink<T>(\n        provider: string,\n        url = joinUrl(this.config.options.baseUrl, this.config.options.unlinkUrl),\n        method = 'POST') {\n        return this.http.request<T>(method, url, { body: { provider } });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: SharedService, },\n{type: ConfigService, },\n{type: PopupService, },\n];\n}\n\nfunction OauthService_tsickle_Closure_declarations() {\n/** @type {?} */\nOauthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOauthService.ctorParameters;\n/** @type {?} */\nOauthService.prototype.depProviders;\n/** @type {?} */\nOauthService.prototype.deps;\n/** @type {?} */\nOauthService.prototype.http;\n/** @type {?} */\nOauthService.prototype.shared;\n/** @type {?} */\nOauthService.prototype.config;\n/** @type {?} */\nOauthService.prototype.popup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { SharedService } from './shared.service';\nimport { ConfigService } from './config.service';\nimport { joinUrl } from './utils';\nimport { Observable } from 'rxjs/Observable';\nimport { tap } from 'rxjs/operators';\nimport { HttpClient, HttpRequest } from '@angular/common/http';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class LocalService {\n/**\n * @param {?} http\n * @param {?} shared\n * @param {?} config\n */\nconstructor(\nprivate http: HttpClient,\nprivate shared: SharedService,\nprivate config: ConfigService) { }\n/**\n * @template T\n * @param {?} user\n * @param {?=} url\n * @return {?}\n */\npublic login<T extends string | object>(user: string | object, url?: string): Observable<T> {\n        return this.http.post<T>(url || joinUrl(this.config.options.baseUrl, this.config.options.loginUrl), user)\n            .pipe(tap((data) => this.shared.setToken(data)));\n    }\n/**\n * @template T\n * @param {?} user\n * @param {?=} url\n * @return {?}\n */\npublic signup<T = any>(user: string | object, url?: string): Observable<T> {\n        return this.http.post<T>(url || joinUrl(this.config.options.baseUrl, this.config.options.signupUrl), user);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: SharedService, },\n{type: ConfigService, },\n];\n}\n\nfunction LocalService_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalService.ctorParameters;\n/** @type {?} */\nLocalService.prototype.http;\n/** @type {?} */\nLocalService.prototype.shared;\n/** @type {?} */\nLocalService.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { SharedService } from './shared.service';\nimport { LocalService } from './local.service';\nimport { OauthService } from './oauth.service';\nimport { Observable } from 'rxjs/Observable';\nimport { StorageType } from './storage-type.enum';\nimport { Tokens } from './config.service';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class AuthService {\n/**\n * @param {?} shared\n * @param {?} local\n * @param {?} oauth\n */\nconstructor(private shared: SharedService,\nprivate local: LocalService,\nprivate oauth: OauthService) {\n    }\n/**\n * @template T\n * @param {?} user\n * @param {?=} url\n * @return {?}\n */\npublic login<T extends string | object = any>(user: string | object, url?: string): Observable<T> {\n        return this.local.login<T>(user, url);\n    }\n/**\n * @template T\n * @param {?} user\n * @param {?=} url\n * @return {?}\n */\npublic signup<T = any>(user: string | object, url?: string): Observable<T> {\n        return this.local.signup<T>(user, url);\n    }\n/**\n * @return {?}\n */\npublic logout(): Observable<void> {\n        return this.shared.logout();\n    }\n/**\n * @template T\n * @param {?} name\n * @param {?=} userData\n * @return {?}\n */\npublic authenticate<T = any>(name: string, userData?: any): Observable<T> {\n        return this.oauth.authenticate<T>(name, userData);\n    }\n/**\n * @template T\n * @param {?} name\n * @param {?=} userData\n * @return {?}\n */\npublic link<T = any>(name: string, userData?: any): Observable<T> {\n        return this.oauth.authenticate<T>(name, userData);\n    }\n/**\n * @template T\n * @param {?} provider\n * @param {?=} url\n * @return {?}\n */\npublic unlink<T = any>(provider: string, url?: string): Observable<T> {\n        return this.oauth.unlink<T>(provider, url);\n    }\n/**\n * @return {?}\n */\npublic isAuthenticated(): Promise<boolean> {\n        return this.shared.isAuthenticated();\n    }\n/**\n * @return {?}\n */\npublic getToken(): Promise<string | null> {\n        return this.shared.getToken();\n    }\n/**\n * @param {?} token\n * @return {?}\n */\npublic setToken(token: string | object): Promise<Tokens> {\n        return this.shared.setToken(token);\n    }\n/**\n * @return {?}\n */\npublic removeToken(): Promise<void> {\n        return this.shared.removeToken();\n    }\n/**\n * @return {?}\n */\npublic getPayload(): Promise<any> {\n        return this.shared.getPayload();\n    }\n/**\n * @param {?} type\n * @return {?}\n */\npublic setStorageType(type: StorageType): boolean {\n        return this.shared.setStorageType(type);\n    }\n/**\n * @return {?}\n */\npublic getExpirationDate(): Promise<Date | null> {\n        return this.shared.getExpirationDate();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SharedService, },\n{type: LocalService, },\n{type: OauthService, },\n];\n}\n\nfunction AuthService_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthService.ctorParameters;\n/** @type {?} */\nAuthService.prototype.shared;\n/** @type {?} */\nAuthService.prototype.local;\n/** @type {?} */\nAuthService.prototype.oauth;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { switchMapTo } from 'rxjs/operators';\nimport { ConfigService } from './config.service';\nimport { SharedService } from './shared.service';\nimport { Injectable, Injector } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { tap, catchError } from 'rxjs/operators';\nexport class JwtInterceptor implements HttpInterceptor {\n/**\n * @param {?} shared\n * @param {?} config\n */\nconstructor(\nprivate shared: SharedService,\nprivate config: ConfigService,\n    ) { }\n/**\n * @param {?} req\n * @param {?} next\n * @return {?}\n */\nintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { authHeader, authToken } = this.config.options;\n\n        return Observable\n            .fromPromise(Promise.all([this.shared.getToken(), this.shared.isAuthenticated()]))\n            .switchMap((auth) => {\n                const /** @type {?} */ token = auth[0];\n                const /** @type {?} */ isAuthenticated = auth[1];\n\n                const /** @type {?} */ newReq = isAuthenticated && !req.headers.has(authHeader)\n                  ? req.clone({ setHeaders: { [authHeader]: `${authToken} ${token}` } })\n                  : req;\n                return next.handle(newReq);\n            }) ;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SharedService, },\n{type: ConfigService, },\n];\n}\n\nfunction JwtInterceptor_tsickle_Closure_declarations() {\n/** @type {?} */\nJwtInterceptor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJwtInterceptor.ctorParameters;\n/** @type {?} */\nJwtInterceptor.prototype.shared;\n/** @type {?} */\nJwtInterceptor.prototype.config;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { TokenRefreshService } from './token.refresh.service';\n/**\n * Created by Ron on 25/12/2015.\n */\n\nimport { ConfigService, IPartialConfigOptions, CONFIG_OPTIONS, IProviders } from './config.service';\nimport { SharedService } from './shared.service';\nimport { OauthService } from './oauth.service';\nimport { PopupService } from './popup.service';\nimport { Oauth1Service } from './oauth1.service';\nimport { Oauth2Service } from './oauth2.service';\nimport { LocalService } from './local.service';\nimport { AuthService } from './auth.service';\nimport { JwtInterceptor } from './interceptor.service';\nimport { StorageService, BrowserStorageService } from './storage.service';\nimport { InjectionToken, ModuleWithProviders, NgModule, Type } from '@angular/core';\nimport { HTTP_INTERCEPTORS, HttpClientModule, HttpClient } from '@angular/common/http';\nimport { StorageType } from './storage-type.enum';\nexport class Ng2UiAuthModule {\n/**\n * @param {?=} configOptions\n * @param {?=} defaultJwtInterceptor\n * @return {?}\n */\nstatic forRoot(configOptions?: IPartialConfigOptions, defaultJwtInterceptor = true): ModuleWithProviders {\n        return {\n            ngModule: Ng2UiAuthModule,\n            providers: [\n                ...configOptions ? [{ provide: CONFIG_OPTIONS, useValue: configOptions }] : [],\n                { provide: ConfigService, useClass: ConfigService, deps: [CONFIG_OPTIONS] },\n                { provide: StorageService, useClass: BrowserStorageService, deps: [ConfigService] },\n                { provide: SharedService, useClass: SharedService, deps: [StorageService, ConfigService, TokenRefreshService] },\n                ...defaultJwtInterceptor ? [{ provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true, deps: [SharedService, ConfigService] }] : [],\n                { provide: OauthService, useClass: OauthService, deps: [HttpClient, SharedService, ConfigService, PopupService] },\n                { provide: PopupService, useClass: PopupService, deps: [ConfigService] },\n                { provide: LocalService, useClass: LocalService, deps: [HttpClient, SharedService, ConfigService] },\n                { provide: AuthService, useClass: AuthService, deps: [SharedService, LocalService, OauthService] },\n                { provide: TokenRefreshService, useClass: TokenRefreshService, deps: [] }\n            ],\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{ imports: [HttpClientModule] }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Ng2UiAuthModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2UiAuthModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNg2UiAuthModule.ctorParameters;\n}\n\n\nexport {\n    LocalService,\n    Oauth2Service,\n    Oauth1Service,\n    PopupService,\n    OauthService,\n    SharedService,\n    StorageService, BrowserStorageService,\n    AuthService,\n    ConfigService, IPartialConfigOptions,\n    JwtInterceptor,\n    CONFIG_OPTIONS,\n    IProviders,\n    StorageType,\n    TokenRefreshService\n};\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["TokenRefreshService","prototype","requestTokenRefresh","refreshToken","of","decorators","type","Injectable","ctorParameters","NONE","MEMORY","LOCAL_STORAGE","SESSION_STORAGE","COOKIE","SESSION_COOKIE","joinUrl","baseUrl","url","test","joined","join","replace","buildQueryString","obj","Object","keys","map","key","encodeURIComponent","getWindowOrigin","w","window","location","origin","protocol","hostname","port","error","CONFIG_OPTIONS","InjectionToken","defaultOptions","withCredentials","tokenRoot","loginUrl","signupUrl","unlinkUrl","tokenName","refreshTokenName","tokenSeparator","tokenPrefix","authHeader","authToken","storageType","cordova","resolveToken","response","config","accessToken","access_token","token","data","tokenRootData","split","reduce","o","x","providers","facebook","name","redirectUri","authorizationEndpoint","additionalUrlParams","display","scope","scopeDelimiter","oauthType","popupOptions","width","height","google","prompt","undefined","login_hint","access_type","include_granted_scopes","openid.realm","hd","state","Math","random","toString","substr","github","instagram","linkedin","twitter","twitch","live","yahoo","bitbucket","spotify","ConfigService","options","this","assign","concat","_d","_e","acc","next","Inject","args","StorageService","updateStorageType","get","set","value","date","remove","BrowserStorageService","_super","__extends","_this","call","store","console","warn","checkIsStorageAvailable","getCookie","getItem","setCookie","setItem","removeCookie","removeItem","isCookieStorageAvailable","isWindowStorageAvailable","supported","substring","e","document","Date","now","toUTCString","expires","path","cookie","RegExp","SharedService","storage","tokenRefreshService","getRefreshToken","sent","getToken","getPayload","base64Url","base64","length","JSON","parse","b64DecodeUnicode","setToken","tokens","expDate","getExpirationDate","debug","removeToken","isAuthenticated","_f","isValidToken","Promise","resolve","reject","subscribe","__awaiter","apply","exp","round","getTime","payload","setUTCSeconds","logout","Observable","create","observer","then","complete","setStorageType","str","decodeURIComponent","Array","atob","c","charCodeAt","slice","PopupService","open","stringifiedOptions","stringifyOptions","prepareOptions","windowName","navigator","userAgent","isCordovaApp","popupWindow","focus","eventListener","pollPopup","Error","merge","fromEvent","pipe","delay","switchMap","event","closed","throw","indexOf","empty","parser","createElement","href","search","hash","queryParams","hashParams","parseQueryString","qs","allParams","close","take","interval","_throw","popupWindowOrigin","left","screenX","outerWidth","top","screenY","outerHeight","toolbar","visibleToolbar","joinedKeyValue","keyValue","Oauth1Service","http","popup","oauthOptions","userData","serverUrl","post","authorizationData","oauthData","exchangeForToken","body","method","exchangeForTokenUrl","request","HttpClient","Oauth2Service","getAuthorizationData","responseType","clientId","resolvedState","filter","_","__window","__self","self","WorkerGlobalScope","_root","global","root_1","isArray","tryCatchTarget","tryCatcher","arguments","errorObject_1","errorObject","fn","UnsubscriptionError","errors","err","i","stack","message","flattenUnsubscriptionErrors","errs","UnsubscriptionError_1","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","len","isFunction_1","isFunction","tryCatch_1","tryCatch","isArray_1","sub","isObject_1","isObject","push","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","splice","parent","Symbol","root","exports","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Observer_1","SafeSubscriber","rxSubscriber_1","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","nextOrObserver","Subscriber_1","getSymbolObservable","$$observable","observable","pipeFromArray","fns","input","prev","noop_1","noop","_i","Observable$$1","_isScalar","_subscribe","lift","operator","source","sink","toSubscriber_1","toSubscriber","_trySubscribe","forEach","PromiseCtor","Rx","observable_1","operations","pipe_1","toPromise","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","SubjectSubscriber_1","Subject","hasError","thrownError","AnonymousSubject","ObjectUnsubscribedError_1","copy","SubjectSubscription_1","asObservable","Observable_1","Subject_2","AsyncSubject","hasNext","hasCompleted","Subject_1","dispatchNext","arg","dispatchError","BoundCallbackObservable","callbackFunc","selector","scheduler","func","schedule","dispatch","AsyncSubject_1","handler","handlerFn","innerArgs","result_1","result_2","bindCallback","bindCallback_1","_a","shift","dispatchNext$1","dispatchError$1","BoundNodeCallbackObservable","bindNodeCallback","bindNodeCallback_1","ScalarObservable","done","EmptyObservable","ArrayObservable","array","isScheduler_1","isScheduler","pop","ScalarObservable_1","EmptyObservable_1","count","OuterSubscriber","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","symbolIteratorPonyfill","iterator","Set_1","Set","Map_1","Map","getOwnPropertyNames","$$iterator","InnerSubscriber","outerSubscriber","result","InnerSubscriber_1","isArrayLike_1","isArrayLike","isPromise_1","isPromise","setTimeout","iterator_1","item","obs","TypeError","msg","none","combineLatest_2$2","observables","project","ArrayObservable_1","CombineLatestOperator","CombineLatestSubscriber","CombineLatestOperator_1","active","values","toRespond","subscribeToResult_1","subscribeToResult","unused","oldVal","_tryProject","OuterSubscriber_1","combineLatest_1","combineLatest","dispatchNext$2","dispatchError$2","PromiseObservable","promise","IteratorObservable_2","IteratorObservable","StringIterator","ArrayIterator","getIterator","return","idx","charAt","arr","isNaN","isFinite","valueAsNumber","sign","floor","abs","maxSafeInteger","toLength","pow","ArrayLikeObservable","arrayLike","Notification","kind","hasValue","observe","do","accept","toObservable","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn_2","ObserveOnOperator","ObserveOnSubscriber","ObserveOnOperator_1","notification","scheduleMessage","ObserveOnMessage","Notification_1","ObserveOnSubscriber_1","FromObservable","ish","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","FromObservable_1","mergeMap_2","resultSelector","concurrent","Number","POSITIVE_INFINITY","MergeMapOperator","MergeMapSubscriber","MergeMapOperator_1","buffer","_tryNext","_innerSub","_notifyResultSelector","mergeMap_1","mergeMap","identity_1","identity","mergeAll_1","mergeAll","from_1","from","concatAll_1","concatAll","of_1","concat_1","DeferObservable_2","DeferObservable","observableFactory","DeferSubscriber","factory","tryDefer","_callFactory","defer","defer_1","empty_1","ForkJoinObservable_2","ForkJoinObservable","sources","ForkJoinSubscriber","completed","haveValues","total","innerSubscription","_hasValue","forkJoin","forkJoin_1","FromEventObservable","sourceObj","eventName","target","setupSubscription","addEventListener","removeEventListener","source_1","on","off","source_2","addListener","removeListener","source_3","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_callSelector","retValue","_callAddHandler","errorSubscriber","fromEventPattern","fromEventPattern_1","fromPromise","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","generate","generate_1","IfObservable_2","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","if","if_1","_if","val","parseFloat","Action","work","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Action_1","Scheduler","SchedulerAction","AsyncScheduler","scheduled","action","Scheduler_1","AsyncScheduler_1","AsyncAction_1","IntervalObservable","period","async_1","async","isNumeric_1","isNumeric","interval_1","mergeStatic$1","last","mergeStatic","merge_1","race_2","RaceOperator","RaceSubscriber","RaceOperator_1","hasFirst","race","race_1","NeverObservable","never","never_1","onErrorResumeNext_2$1","nextSources","OnErrorResumeNextOperator","onErrorResumeNextStatic_1","OnErrorResumeNextSubscriber","subscribeToNextSource","onErrorResumeNext_1","onErrorResumeNextStatic","onErrorResumeNext","dispatch$1","PairsObservable","pairs","pairs_1","RangeObservable","start","_count","range","range_1","UsingObservable_2","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","using","using_1","ErrorObservable","throw_1","TimerObservable","dueTime","isDate_1","isDate","initialDelay","timer","timer_1","zip_2$1","zipStatic","ZipOperator","zipStatic_1","ZipSubscriber","ZipOperator_1","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","ZipSubscriber_1","nextResult","isComplete","zip_1","zip","map_2","thisArg","MapOperator","MapSubscriber","MapOperator_1","ajaxGet","headers","AjaxObservable","ajaxGet_1","ajaxPost","ajaxPost_1","ajaxDelete","ajaxDelete_1","ajaxPut","ajaxPut_1","ajaxPatch","ajaxPatch_1","mapResponse","map_1","ajaxGetJSON","ajaxGetJSON_1","urlOrRequest","createXHR","crossDomain","XMLHttpRequest","XDomainRequest","progId","progIds","ActiveXObject","getXMLHttpRequest","timeout","prop","hasOwnProperty","AjaxSubscriber","delete","put","patch","getJSON","AjaxObservable_2","FormData","serializeBody","send","xhr","AjaxResponse","_b","user","password","setupEvents","setHeaders","contentType","splitIndex","encodeURI","stringify","setRequestHeader","progressSubscriber","xhrTimeout","AjaxTimeoutError","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","AjaxError","onerror","xhrReadyStateChange","readyState","status_1","status","responseText","onreadystatechange","abort","AjaxSubscriber_1","originalEvent","parseXhrResponse","AjaxResponse_1","AjaxError_1","responseXML","ajax","ajax_1","QueueAction","QueueScheduler","QueueAction_1","ReplaySubject_2","ReplaySubject","bufferSize","windowTime","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","queue_1","eventsCount","spliceCount","time","max","assignImpl","k","getAssign","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","assign_1","ReplaySubject_1","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","_connectSocket","binaryType","onopen","openObserver","queue","closingObserver","code","reason","onclose","closeObserver","wasClean","onmessage","webSocket","webSocket_1","buffer_2$2","closingNotifier","BufferOperator","BufferSubscriber","buffer_1","bufferCount_2$2","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","bufferCount_1","bufferCount","bufferTime_2$2","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeOperator","BufferTimeSubscriber","Context","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","prevContext","bufferTime_1","bufferTime","bufferToggle_2$2","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferToggle","bufferWhen_2$2","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","bufferWhen","catchError_2","CatchOperator","caught","CatchSubscriber","err2","catchError_1","catchError","catch","catch_1","_catch","combineAll_1","combineAll","concatMap_1","concatMap","innerObservable","concatMapTo_1","concatMapTo","count_2$2","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize_2$2","DeMaterializeOperator","DeMaterializeSubscriber","dematerialize_1","dematerialize","debounce_2$2","durationSelector","DebounceOperator","DebounceSubscriber","durationSubscription","emitValue","duration","debounce_1","debounce","debounceTime_2$2","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debouncedNext","dispatchNext$3","debounceTime_1","debounceTime","defaultIfEmpty_2$2","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","defaultIfEmpty","delay_2$2","delayFor","DelayOperator","DelaySubscriber","delay_1","_schedule","scheduleNotification","DelayMessage","delayWhen_2$2","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","delayWhen_1","delayWhen","minimalSetImpl","MinimalSet","_values","has","defineProperty","clear","distinct_2$2","keySelector","flushes","DistinctOperator","DistinctSubscriber","_useKeySelector","_finalizeNext","distinct_1","distinct","distinctUntilChanged_2$2","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","distinctUntilChanged_1","distinctUntilChanged","distinctUntilKeyChanged_1","distinctUntilKeyChanged","tap_2","DoOperator","DoSubscriber","safeSubscriber","tap_1","tap","do_1","_do","exhaust_2$2","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","exhaust_1","exhaust","exhaustMap_2$2","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","exhaustMap","expand_2$2","ExpandOperator","ExpandSubscriber","ExpandOperator_1","subscribeToProjection","expand_1","expand","ArgumentOutOfRangeError","elementAt_2$2","ElementAtOperator","ArgumentOutOfRangeError_1","ElementAtSubscriber","elementAt_1","elementAt","filter_2$2","FilterOperator","FilterSubscriber","filter_1","finalize_2","callback","FinallyOperator","FinallySubscriber","finalize_1","finalize","finally","finally_1","_finally","find_2$2","FindValueOperator","yieldIndex","FindValueSubscriber","FindValueOperator_1","find_1","find","findIndex_1","findIndex","EmptyError","first_2$2","FirstOperator","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError_1","first_1","first","MapPolyfill","size","_keys","cb","MapPolyfill_1","FastMap","groupBy_2$2","elementSelector","subjectSelector","GroupByOperator","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","FastMap_1","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","GroupedObservable_1","groupBy_1","groupBy","ignoreElements_2$2","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","ignoreElements","isEmpty_2$2","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit_2$2","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","audit","auditTime_1","auditTime","last_2$2","LastOperator","LastSubscriber","last_1","let","let_1","letProto","letBind","every_2$2","EveryOperator","EverySubscriber","everyValueMatch","every_1","every","mapTo_2$2","MapToOperator","MapToSubscriber","mapTo_1","mapTo","materialize_2$2","MaterializeOperator","MaterializeSubscriber","materialize_1","materialize","scan_2","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","takeLast_2","TakeLastOperator","TakeLastSubscriber","ring","scan_1","scan","takeLast_1","takeLast","comparer","reduce_1","max_1","flatMap","mergeMapTo_2$2","MergeMapToOperator","MergeMapToSubscriber","MergeMapToOperator_1","mergeMapTo_1","mergeMapTo","flatMapTo","mergeScan_2$2","MergeScanOperator","MergeScanSubscriber","MergeScanOperator_1","mergeScan_1","mergeScan","min","min_1","refCount_2","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","refCount_1","ConnectableObservable_2","connectableProto","connectableObservableDescriptor","writable","multicast_2$2","subjectOrSubjectFactory","MulticastOperator","ConnectableObservable_1","multicast_1","multicast","observeOn","pairwise_2$2","PairwiseOperator","PairwiseSubscriber","hasPrev","pairwise_1","pairwise","pred","notPred","not_1","not","partition_1","partition","properties","props","currentProp","p","pluck_1","pluck","publish_1","publish","BehaviorSubject","_value","getValue","BehaviorSubject_1","publishBehavior_1","publishBehavior","selectorOrScheduler","publishReplay_1","publishReplay","publishLast_1","publishLast","repeat_2$2","RepeatOperator","RepeatSubscriber","repeat_1","repeat","repeatWhen_2$2","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","repeatWhen_1","repeatWhen","retry_2$2","RetryOperator","RetrySubscriber","retry_1","retry","retryWhen_2$2","RetryWhenOperator","RetryWhenSubscriber","retryWhen_1","retryWhen","sample_2$2","SampleOperator","sampleSubscriber","SampleSubscriber","sample_1","sample","sampleTime_2$2","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","sampleTime_1","sampleTime","sequenceEqual_2$2","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","SequenceEqualOperator_1","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","a","b","areEqual","nextB","SequenceEqualSubscriber_1","sequenceEqual_1","sequenceEqual","shareSubjectFactory","share_1","share","shareReplayOperator","shareReplay_1","shareReplay","single_2$2","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","single","skip_2$2","SkipOperator","SkipSubscriber","skip_1","skip","skipLast_2$2","SkipLastOperator","_skipCount","SkipLastSubscriber","_ring","skipCount","currentIndex","oldValue","skipLast_1","skipLast","skipUntil_2$2","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipUntil","skipWhile_2$2","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","skipWhile","startWith_1","startWith","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","onGlobalMessage","globalMessageHandler","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","AsapAction","Immediate_1","Immediate","AsapScheduler","AsapAction_1","SubscribeOnObservable","delayTime","asap_1","asap","subscribeOn_2$2","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","subscribeOn","switchMap_2","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchAll_1","switchAll","switch","switch_1","_switch","switchMapTo_2$2","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","switchMapTo","take_2$2","TakeOperator","TakeSubscriber","take_1","takeUntil_2$2","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeUntil","takeWhile_2$2","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","takeWhile","defaultThrottleConfig","leading","trailing","throttle","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","throttle_1","throttleTime_2$2","ThrottleTimeOperator","ThrottleTimeSubscriber","dispatchNext$4","throttleTime_1","throttleTime","timeInterval_2$2","TimeIntervalOperator","TimeInterval","TimeInterval_1","TimeIntervalSubscriber","lastTime","span","timeInterval_1","timeInterval","TimeoutError","timeout_2$2","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","errorInstance","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","timeout_1","timeoutWith_2$2","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutWith_1","timeoutWith","timestamp_2$2","Timestamp","timestamp","timestamp_1","toArrayReducer","toArray_1","toArray","window_2$2","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowCount_2$2","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","windowCount_1","windowCount","windowTime_2$2","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","timeSpanState","windowTime_1","windowToggle_2$2","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowToggle","windowWhen_2$2","unsubscribeClosingNotification","closingNotification","windowWhen_1","windowWhen","withLatestFrom_2$2","WithLatestFromOperator","WithLatestFromSubscriber","found","withLatestFrom_1","withLatestFrom","zipProto","zipAll_1","zipAll","subscribedFrame","unsubscribedFrame","SubscriptionLoggable","logSubscribedFrame","SubscriptionLog_1","SubscriptionLog","logUnsubscribedFrame","subscriptionLogs","oldSubscriptionLog","derivedCtor","baseCtors","baseCtor","propertyKeys","j","len2","name_1","ColdObservable","messages","scheduleMessages","messagesLength","frame","ColdObservable_2","applyMixins_1","applyMixins","SubscriptionLoggable_1","HotObservable","setup","HotObservable_2","VirtualTimeScheduler_2","VirtualTimeScheduler","maxFrames","VirtualAction","frameTimeFactor","sort","sortActions","defaultMaxFrame","RequestAnimationFrameDefinition","TestScheduler","assertDeepEqual","VirtualTimeScheduler_1","hotObservables","coldObservables","flushTests","createTime","marbles","createColdObservable","parseMarbles","cold","ColdObservable_1","createHotObservable","HotObservable_1","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","readyFlushTests","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrameAction","AnimationFrame_1","AnimationFrame","Observable$2","AnimationFrameScheduler","AnimationFrameAction_1","OauthService","shared","depProviders","provide","useValue","deps","authenticate","providerOf","Injector","unlink","provider","LocalService","login","signup","AuthService","local","oauth","link","JwtInterceptor","intercept","req","all","auth","newReq","clone","Ng2UiAuthModule","forRoot","configOptions","defaultJwtInterceptor","ngModule","useClass","HTTP_INTERCEPTORS","multi","NgModule","imports","HttpClientModule"],"mappings":"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"}
