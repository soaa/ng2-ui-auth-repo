{"version":3,"file":"ng2-ui-auth.umd.min.js","sources":["~/ng2-ui-auth/src/storage-type.enum.ts","~/ng2-ui-auth/src/utils.ts","~/ng2-ui-auth/src/config.service.ts","~/ng2-ui-auth/src/storage.service.ts","~/ng2-ui-auth/src/shared.service.ts","~/ng2-ui-auth/src/popup.service.ts","~/ng2-ui-auth/src/oauth1.service.ts","~/ng2-ui-auth/src/oauth2.service.ts","../../../node_modules/src/util/root.ts","../../../node_modules/src/util/isFunction.ts","../../../node_modules/src/util/isArray.ts","../../../node_modules/src/util/isObject.ts","../../../node_modules/src/util/tryCatch.ts","../../../node_modules/src/util/errorObject.ts","../../../node_modules/src/util/UnsubscriptionError.ts","../../../node_modules/src/Subscription.ts","../../../node_modules/src/Observer.ts","../../../node_modules/src/symbol/rxSubscriber.ts","../../../node_modules/src/Subscriber.ts","../../../node_modules/src/util/toSubscriber.ts","../../../node_modules/src/symbol/observable.ts","../../../node_modules/src/util/noop.ts","../../../node_modules/src/util/pipe.ts","../../../node_modules/src/Observable.ts","../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../node_modules/src/SubjectSubscription.ts","../../../node_modules/src/Subject.ts","../../../node_modules/src/AsyncSubject.ts","../../../node_modules/src/observable/BoundCallbackObservable.ts","../../../node_modules/src/observable/bindCallback.ts","../../../node_modules/src/add/observable/bindCallback.ts","../../../node_modules/src/observable/BoundNodeCallbackObservable.ts","../../../node_modules/src/observable/bindNodeCallback.ts","../../../node_modules/src/add/observable/bindNodeCallback.ts","../../../node_modules/src/util/isScheduler.ts","../../../node_modules/src/observable/ScalarObservable.ts","../../../node_modules/src/observable/EmptyObservable.ts","../../../node_modules/src/observable/ArrayObservable.ts","../../../node_modules/src/OuterSubscriber.ts","../../../node_modules/src/util/isArrayLike.ts","../../../node_modules/src/util/isPromise.ts","../../../node_modules/src/symbol/iterator.ts","../../../node_modules/src/InnerSubscriber.ts","../../../node_modules/src/util/subscribeToResult.ts","../../../node_modules/src/operators/combineLatest.ts","../../../node_modules/src/observable/combineLatest.ts","../../../node_modules/src/add/observable/combineLatest.ts","../../../node_modules/src/observable/of.ts","../../../node_modules/src/observable/PromiseObservable.ts","../../../node_modules/src/observable/IteratorObservable.ts","../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../node_modules/src/Notification.ts","../../../node_modules/src/operators/observeOn.ts","../../../node_modules/src/observable/FromObservable.ts","../../../node_modules/src/observable/from.ts","../../../node_modules/src/operators/mergeMap.ts","../../../node_modules/src/util/identity.ts","../../../node_modules/src/operators/mergeAll.ts","../../../node_modules/src/operators/concatAll.ts","../../../node_modules/src/observable/concat.ts","../../../node_modules/src/add/observable/concat.ts","../../../node_modules/src/observable/DeferObservable.ts","../../../node_modules/src/observable/defer.ts","../../../node_modules/src/add/observable/defer.ts","../../../node_modules/src/observable/empty.ts","../../../node_modules/src/add/observable/empty.ts","../../../node_modules/src/observable/ForkJoinObservable.ts","../../../node_modules/src/observable/forkJoin.ts","../../../node_modules/src/add/observable/forkJoin.ts","../../../node_modules/src/add/observable/from.ts","../../../node_modules/src/observable/FromEventObservable.ts","../../../node_modules/src/observable/fromEvent.ts","../../../node_modules/src/add/observable/fromEvent.ts","../../../node_modules/src/observable/FromEventPatternObservable.ts","../../../node_modules/src/observable/fromEventPattern.ts","../../../node_modules/src/add/observable/fromEventPattern.ts","../../../node_modules/src/observable/fromPromise.ts","../../../node_modules/src/add/observable/fromPromise.ts","../../../node_modules/src/observable/GenerateObservable.ts","../../../node_modules/src/observable/generate.ts","../../../node_modules/src/add/observable/generate.ts","../../../node_modules/src/observable/IfObservable.ts","../../../node_modules/src/observable/if.ts","../../../node_modules/src/add/observable/if.ts","../../../node_modules/src/util/isNumeric.ts","../../../node_modules/src/scheduler/Action.ts","../../../node_modules/src/scheduler/AsyncAction.ts","../../../node_modules/src/Scheduler.ts","../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../node_modules/src/scheduler/async.ts","../../../node_modules/src/observable/IntervalObservable.ts","../../../node_modules/src/observable/interval.ts","../../../node_modules/src/add/observable/interval.ts","../../../node_modules/src/operators/merge.ts","../../../node_modules/src/operator/merge.ts","../../../node_modules/src/observable/merge.ts","../../../node_modules/src/add/observable/merge.ts","../../../node_modules/src/observable/race.ts","../../../node_modules/src/add/observable/race.ts","../../../node_modules/src/observable/NeverObservable.ts","../../../node_modules/src/observable/never.ts","../../../node_modules/src/add/observable/never.ts","../../../node_modules/src/add/observable/of.ts","../../../node_modules/src/operators/onErrorResumeNext.ts","../../../node_modules/src/observable/onErrorResumeNext.ts","../../../node_modules/src/add/observable/onErrorResumeNext.ts","../../../node_modules/src/observable/PairsObservable.ts","../../../node_modules/src/observable/pairs.ts","../../../node_modules/src/add/observable/pairs.ts","../../../node_modules/src/observable/RangeObservable.ts","../../../node_modules/src/observable/range.ts","../../../node_modules/src/add/observable/range.ts","../../../node_modules/src/observable/UsingObservable.ts","../../../node_modules/src/observable/using.ts","../../../node_modules/src/add/observable/using.ts","../../../node_modules/src/observable/ErrorObservable.ts","../../../node_modules/src/observable/throw.ts","../../../node_modules/src/add/observable/throw.ts","../../../node_modules/src/util/isDate.ts","../../../node_modules/src/observable/TimerObservable.ts","../../../node_modules/src/observable/timer.ts","../../../node_modules/src/add/observable/timer.ts","../../../node_modules/src/operators/zip.ts","../../../node_modules/src/observable/zip.ts","../../../node_modules/src/add/observable/zip.ts","../../../node_modules/src/operators/map.ts","../../../node_modules/src/observable/dom/AjaxObservable.ts","../../../node_modules/src/observable/dom/ajax.ts","../../../node_modules/src/add/observable/dom/ajax.ts","../../../node_modules/src/scheduler/QueueAction.ts","../../../node_modules/src/scheduler/queue.ts","../../../node_modules/src/scheduler/QueueScheduler.ts","../../../node_modules/src/ReplaySubject.ts","../../../node_modules/src/util/assign.ts","../../../node_modules/src/observable/dom/WebSocketSubject.ts","../../../node_modules/src/observable/dom/webSocket.ts","../../../node_modules/src/add/observable/dom/webSocket.ts","../../../node_modules/src/operators/buffer.ts","../../../node_modules/src/operator/buffer.ts","../../../node_modules/src/add/operator/buffer.ts","../../../node_modules/src/operators/bufferCount.ts","../../../node_modules/src/operator/bufferCount.ts","../../../node_modules/src/add/operator/bufferCount.ts","../../../node_modules/src/operators/bufferTime.ts","../../../node_modules/src/operator/bufferTime.ts","../../../node_modules/src/add/operator/bufferTime.ts","../../../node_modules/src/operators/bufferToggle.ts","../../../node_modules/src/operator/bufferToggle.ts","../../../node_modules/src/add/operator/bufferToggle.ts","../../../node_modules/src/operators/bufferWhen.ts","../../../node_modules/src/operator/bufferWhen.ts","../../../node_modules/src/add/operator/bufferWhen.ts","../../../node_modules/src/operators/catchError.ts","../../../node_modules/src/operator/catch.ts","../../../node_modules/src/add/operator/catch.ts","../../../node_modules/src/operators/combineAll.ts","../../../node_modules/src/operator/combineAll.ts","../../../node_modules/src/add/operator/combineAll.ts","../../../node_modules/src/operator/combineLatest.ts","../../../node_modules/src/add/operator/combineLatest.ts","../../../node_modules/src/operators/concat.ts","../../../node_modules/src/operator/concat.ts","../../../node_modules/src/add/operator/concat.ts","../../../node_modules/src/operator/concatAll.ts","../../../node_modules/src/add/operator/concatAll.ts","../../../node_modules/src/operators/concatMap.ts","../../../node_modules/src/operator/concatMap.ts","../../../node_modules/src/add/operator/concatMap.ts","../../../node_modules/src/operators/concatMapTo.ts","../../../node_modules/src/operator/concatMapTo.ts","../../../node_modules/src/add/operator/concatMapTo.ts","../../../node_modules/src/operators/count.ts","../../../node_modules/src/operator/count.ts","../../../node_modules/src/add/operator/count.ts","../../../node_modules/src/operators/dematerialize.ts","../../../node_modules/src/operator/dematerialize.ts","../../../node_modules/src/add/operator/dematerialize.ts","../../../node_modules/src/operators/debounce.ts","../../../node_modules/src/operator/debounce.ts","../../../node_modules/src/add/operator/debounce.ts","../../../node_modules/src/operators/debounceTime.ts","../../../node_modules/src/operator/debounceTime.ts","../../../node_modules/src/add/operator/debounceTime.ts","../../../node_modules/src/operators/defaultIfEmpty.ts","../../../node_modules/src/operator/defaultIfEmpty.ts","../../../node_modules/src/add/operator/defaultIfEmpty.ts","../../../node_modules/src/operators/delay.ts","../../../node_modules/src/operator/delay.ts","../../../node_modules/src/add/operator/delay.ts","../../../node_modules/src/operators/delayWhen.ts","../../../node_modules/src/operator/delayWhen.ts","../../../node_modules/src/add/operator/delayWhen.ts","../../../node_modules/src/util/Set.ts","../../../node_modules/src/operators/distinct.ts","../../../node_modules/src/operator/distinct.ts","../../../node_modules/src/add/operator/distinct.ts","../../../node_modules/src/operators/distinctUntilChanged.ts","../../../node_modules/src/operator/distinctUntilChanged.ts","../../../node_modules/src/add/operator/distinctUntilChanged.ts","../../../node_modules/src/operators/distinctUntilKeyChanged.ts","../../../node_modules/src/operator/distinctUntilKeyChanged.ts","../../../node_modules/src/add/operator/distinctUntilKeyChanged.ts","../../../node_modules/src/operators/tap.ts","../../../node_modules/src/operator/do.ts","../../../node_modules/src/add/operator/do.ts","../../../node_modules/src/operators/exhaust.ts","../../../node_modules/src/operator/exhaust.ts","../../../node_modules/src/add/operator/exhaust.ts","../../../node_modules/src/operators/exhaustMap.ts","../../../node_modules/src/operator/exhaustMap.ts","../../../node_modules/src/add/operator/exhaustMap.ts","../../../node_modules/src/operators/expand.ts","../../../node_modules/src/operator/expand.ts","../../../node_modules/src/add/operator/expand.ts","../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../node_modules/src/operators/elementAt.ts","../../../node_modules/src/operator/elementAt.ts","../../../node_modules/src/add/operator/elementAt.ts","../../../node_modules/src/operators/filter.ts","../../../node_modules/src/operator/filter.ts","../../../node_modules/src/add/operator/filter.ts","../../../node_modules/src/operators/finalize.ts","../../../node_modules/src/operator/finally.ts","../../../node_modules/src/add/operator/finally.ts","../../../node_modules/src/operators/find.ts","../../../node_modules/src/operator/find.ts","../../../node_modules/src/add/operator/find.ts","../../../node_modules/src/operators/findIndex.ts","../../../node_modules/src/operator/findIndex.ts","../../../node_modules/src/add/operator/findIndex.ts","../../../node_modules/src/util/EmptyError.ts","../../../node_modules/src/operators/first.ts","../../../node_modules/src/operator/first.ts","../../../node_modules/src/add/operator/first.ts","../../../node_modules/src/util/MapPolyfill.ts","../../../node_modules/src/util/Map.ts","../../../node_modules/src/util/FastMap.ts","../../../node_modules/src/operators/groupBy.ts","../../../node_modules/src/operator/groupBy.ts","../../../node_modules/src/add/operator/groupBy.ts","../../../node_modules/src/operators/ignoreElements.ts","../../../node_modules/src/operator/ignoreElements.ts","../../../node_modules/src/add/operator/ignoreElements.ts","../../../node_modules/src/operators/isEmpty.ts","../../../node_modules/src/operator/isEmpty.ts","../../../node_modules/src/add/operator/isEmpty.ts","../../../node_modules/src/operators/audit.ts","../../../node_modules/src/operator/audit.ts","../../../node_modules/src/add/operator/audit.ts","../../../node_modules/src/operators/auditTime.ts","../../../node_modules/src/operator/auditTime.ts","../../../node_modules/src/add/operator/auditTime.ts","../../../node_modules/src/operators/last.ts","../../../node_modules/src/operator/last.ts","../../../node_modules/src/add/operator/last.ts","../../../node_modules/src/operator/let.ts","../../../node_modules/src/add/operator/let.ts","../../../node_modules/src/operators/every.ts","../../../node_modules/src/operator/every.ts","../../../node_modules/src/add/operator/every.ts","../../../node_modules/src/operator/map.ts","../../../node_modules/src/add/operator/map.ts","../../../node_modules/src/operators/mapTo.ts","../../../node_modules/src/operator/mapTo.ts","../../../node_modules/src/add/operator/mapTo.ts","../../../node_modules/src/operators/materialize.ts","../../../node_modules/src/operator/materialize.ts","../../../node_modules/src/add/operator/materialize.ts","../../../node_modules/src/operators/scan.ts","../../../node_modules/src/operators/takeLast.ts","../../../node_modules/src/operators/reduce.ts","../../../node_modules/src/operators/max.ts","../../../node_modules/src/operator/max.ts","../../../node_modules/src/add/operator/max.ts","../../../node_modules/src/add/operator/merge.ts","../../../node_modules/src/operator/mergeAll.ts","../../../node_modules/src/add/operator/mergeAll.ts","../../../node_modules/src/operator/mergeMap.ts","../../../node_modules/src/add/operator/mergeMap.ts","../../../node_modules/src/operators/mergeMapTo.ts","../../../node_modules/src/operator/mergeMapTo.ts","../../../node_modules/src/add/operator/mergeMapTo.ts","../../../node_modules/src/operators/mergeScan.ts","../../../node_modules/src/operator/mergeScan.ts","../../../node_modules/src/add/operator/mergeScan.ts","../../../node_modules/src/operators/min.ts","../../../node_modules/src/operator/min.ts","../../../node_modules/src/add/operator/min.ts","../../../node_modules/src/operators/refCount.ts","../../../node_modules/src/observable/ConnectableObservable.ts","../../../node_modules/src/operators/multicast.ts","../../../node_modules/src/operator/multicast.ts","../../../node_modules/src/add/operator/multicast.ts","../../../node_modules/src/operator/observeOn.ts","../../../node_modules/src/add/operator/observeOn.ts","../../../node_modules/src/operator/onErrorResumeNext.ts","../../../node_modules/src/add/operator/onErrorResumeNext.ts","../../../node_modules/src/operators/pairwise.ts","../../../node_modules/src/operator/pairwise.ts","../../../node_modules/src/add/operator/pairwise.ts","../../../node_modules/src/util/not.ts","../../../node_modules/src/operators/partition.ts","../../../node_modules/src/operator/partition.ts","../../../node_modules/src/add/operator/partition.ts","../../../node_modules/src/operators/pluck.ts","../../../node_modules/src/operator/pluck.ts","../../../node_modules/src/add/operator/pluck.ts","../../../node_modules/src/operators/publish.ts","../../../node_modules/src/operator/publish.ts","../../../node_modules/src/add/operator/publish.ts","../../../node_modules/src/BehaviorSubject.ts","../../../node_modules/src/operators/publishBehavior.ts","../../../node_modules/src/operator/publishBehavior.ts","../../../node_modules/src/add/operator/publishBehavior.ts","../../../node_modules/src/operators/publishReplay.ts","../../../node_modules/src/operator/publishReplay.ts","../../../node_modules/src/add/operator/publishReplay.ts","../../../node_modules/src/operators/publishLast.ts","../../../node_modules/src/operator/publishLast.ts","../../../node_modules/src/add/operator/publishLast.ts","../../../node_modules/src/operators/race.ts","../../../node_modules/src/operator/race.ts","../../../node_modules/src/add/operator/race.ts","../../../node_modules/src/operator/reduce.ts","../../../node_modules/src/add/operator/reduce.ts","../../../node_modules/src/operators/repeat.ts","../../../node_modules/src/operator/repeat.ts","../../../node_modules/src/add/operator/repeat.ts","../../../node_modules/src/operators/repeatWhen.ts","../../../node_modules/src/operator/repeatWhen.ts","../../../node_modules/src/add/operator/repeatWhen.ts","../../../node_modules/src/operators/retry.ts","../../../node_modules/src/operator/retry.ts","../../../node_modules/src/add/operator/retry.ts","../../../node_modules/src/operators/retryWhen.ts","../../../node_modules/src/operator/retryWhen.ts","../../../node_modules/src/add/operator/retryWhen.ts","../../../node_modules/src/operators/sample.ts","../../../node_modules/src/operator/sample.ts","../../../node_modules/src/add/operator/sample.ts","../../../node_modules/src/operators/sampleTime.ts","../../../node_modules/src/operator/sampleTime.ts","../../../node_modules/src/add/operator/sampleTime.ts","../../../node_modules/src/operator/scan.ts","../../../node_modules/src/add/operator/scan.ts","../../../node_modules/src/operators/sequenceEqual.ts","../../../node_modules/src/operator/sequenceEqual.ts","../../../node_modules/src/add/operator/sequenceEqual.ts","../../../node_modules/src/operators/share.ts","../../../node_modules/src/operator/share.ts","../../../node_modules/src/add/operator/share.ts","../../../node_modules/src/operators/shareReplay.ts","../../../node_modules/src/operator/shareReplay.ts","../../../node_modules/src/add/operator/shareReplay.ts","../../../node_modules/src/operators/single.ts","../../../node_modules/src/operator/single.ts","../../../node_modules/src/add/operator/single.ts","../../../node_modules/src/operators/skip.ts","../../../node_modules/src/operator/skip.ts","../../../node_modules/src/add/operator/skip.ts","../../../node_modules/src/operators/skipLast.ts","../../../node_modules/src/operator/skipLast.ts","../../../node_modules/src/add/operator/skipLast.ts","../../../node_modules/src/operators/skipUntil.ts","../../../node_modules/src/operator/skipUntil.ts","../../../node_modules/src/add/operator/skipUntil.ts","../../../node_modules/src/operators/skipWhile.ts","../../../node_modules/src/operator/skipWhile.ts","../../../node_modules/src/add/operator/skipWhile.ts","../../../node_modules/src/operators/startWith.ts","../../../node_modules/src/operator/startWith.ts","../../../node_modules/src/add/operator/startWith.ts","../../../node_modules/src/util/Immediate.ts","../../../node_modules/src/scheduler/AsapAction.ts","../../../node_modules/src/scheduler/asap.ts","../../../node_modules/src/scheduler/AsapScheduler.ts","../../../node_modules/src/observable/SubscribeOnObservable.ts","../../../node_modules/src/operators/subscribeOn.ts","../../../node_modules/src/operator/subscribeOn.ts","../../../node_modules/src/add/operator/subscribeOn.ts","../../../node_modules/src/operators/switchMap.ts","../../../node_modules/src/operators/switchAll.ts","../../../node_modules/src/operator/switch.ts","../../../node_modules/src/add/operator/switch.ts","../../../node_modules/src/operator/switchMap.ts","../../../node_modules/src/add/operator/switchMap.ts","../../../node_modules/src/operators/switchMapTo.ts","../../../node_modules/src/operator/switchMapTo.ts","../../../node_modules/src/add/operator/switchMapTo.ts","../../../node_modules/src/operators/take.ts","../../../node_modules/src/operator/take.ts","../../../node_modules/src/add/operator/take.ts","../../../node_modules/src/operator/takeLast.ts","../../../node_modules/src/add/operator/takeLast.ts","../../../node_modules/src/operators/takeUntil.ts","../../../node_modules/src/operator/takeUntil.ts","../../../node_modules/src/add/operator/takeUntil.ts","../../../node_modules/src/operators/takeWhile.ts","../../../node_modules/src/operator/takeWhile.ts","../../../node_modules/src/add/operator/takeWhile.ts","../../../node_modules/src/operators/throttle.ts","../../../node_modules/src/operator/throttle.ts","../../../node_modules/src/add/operator/throttle.ts","../../../node_modules/src/operators/throttleTime.ts","../../../node_modules/src/operator/throttleTime.ts","../../../node_modules/src/add/operator/throttleTime.ts","../../../node_modules/src/operators/timeInterval.ts","../../../node_modules/src/operator/timeInterval.ts","../../../node_modules/src/add/operator/timeInterval.ts","../../../node_modules/src/util/TimeoutError.ts","../../../node_modules/src/operators/timeout.ts","../../../node_modules/src/operator/timeout.ts","../../../node_modules/src/add/operator/timeout.ts","../../../node_modules/src/operators/timeoutWith.ts","../../../node_modules/src/operator/timeoutWith.ts","../../../node_modules/src/add/operator/timeoutWith.ts","../../../node_modules/src/operators/timestamp.ts","../../../node_modules/src/operator/timestamp.ts","../../../node_modules/src/add/operator/timestamp.ts","../../../node_modules/src/operators/toArray.ts","../../../node_modules/src/operator/toArray.ts","../../../node_modules/src/add/operator/toArray.ts","../../../node_modules/src/operators/window.ts","../../../node_modules/src/operator/window.ts","../../../node_modules/src/add/operator/window.ts","../../../node_modules/src/operators/windowCount.ts","../../../node_modules/src/operator/windowCount.ts","../../../node_modules/src/add/operator/windowCount.ts","../../../node_modules/src/operators/windowTime.ts","../../../node_modules/src/operator/windowTime.ts","../../../node_modules/src/add/operator/windowTime.ts","../../../node_modules/src/operators/windowToggle.ts","../../../node_modules/src/operator/windowToggle.ts","../../../node_modules/src/add/operator/windowToggle.ts","../../../node_modules/src/operators/windowWhen.ts","../../../node_modules/src/operator/windowWhen.ts","../../../node_modules/src/add/operator/windowWhen.ts","../../../node_modules/src/operators/withLatestFrom.ts","../../../node_modules/src/operator/withLatestFrom.ts","../../../node_modules/src/add/operator/withLatestFrom.ts","../../../node_modules/src/operator/zip.ts","../../../node_modules/src/add/operator/zip.ts","../../../node_modules/src/operators/zipAll.ts","../../../node_modules/src/operator/zipAll.ts","../../../node_modules/src/add/operator/zipAll.ts","../../../node_modules/src/testing/SubscriptionLog.ts","../../../node_modules/src/testing/SubscriptionLoggable.ts","../../../node_modules/src/util/applyMixins.ts","../../../node_modules/src/testing/ColdObservable.ts","../../../node_modules/src/testing/HotObservable.ts","../../../node_modules/src/scheduler/VirtualTimeScheduler.ts","../../../node_modules/src/testing/TestScheduler.ts","../../../node_modules/src/util/AnimationFrame.ts","../../../node_modules/src/scheduler/AnimationFrameAction.ts","../../../node_modules/src/Rx.ts","../../../node_modules/src/scheduler/animationFrame.ts","../../../node_modules/src/scheduler/AnimationFrameScheduler.ts","../../../node_modules/src/operators/index.ts","~/ng2-ui-auth/src/oauth.service.ts","~/ng2-ui-auth/src/local.service.ts","~/ng2-ui-auth/src/auth.service.ts","~/ng2-ui-auth/src/interceptor.service.ts","~/ng2-ui-auth/src/ng2-ui-auth.module.ts"],"sourcesContent":["// ngc (Tsickle) doesn't support typescript 2.4 string enums in libraries yet, using consts as a workarount\nexport const /** @type {?} */ NONE = 'none';\nexport const /** @type {?} */ MEMORY = 'memory';\nexport const /** @type {?} */ LOCAL_STORAGE = 'localStorage';\nexport const /** @type {?} */ SESSION_STORAGE = 'sessionStorage';\nexport const /** @type {?} */ COOKIE = 'cookie';\nexport const /** @type {?} */ SESSION_COOKIE = 'sessionCookie';\n\nexport type StorageType = typeof NONE | typeof MEMORY\n    | typeof LOCAL_STORAGE | typeof SESSION_STORAGE\n    | typeof COOKIE | typeof SESSION_COOKIE;\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\n/**\n * Created by Ron on 17/12/2015.\n * @param {?} baseUrl\n * @param {?} url\n * @return {?}\n */\nexport function joinUrl(baseUrl: string, url: string) {\n    if (/^(?:[a-z]+:)?\\/\\//i.test(url)) {\n        return url;\n    }\n\n    let /** @type {?} */ joined = [baseUrl, url].join('/');\n\n    let /** @type {?} */ normalize = function (str) {\n        return str\n            .replace(/[\\/]+/g, '/')\n            .replace(/\\/\\?/g, '?')\n            .replace(/\\/\\#/g, '#')\n            .replace(/\\:\\//g, '://');\n    };\n\n    return normalize(joined);\n}\n/**\n * @param {?} obj1\n * @param {?} obj2\n * @return {?}\n */\nexport function deepMerge(obj1: object, obj2: object): any {\n    let /** @type {?} */ result = {};\n    for (let /** @type {?} */ i in obj1) {\n        if (obj1.hasOwnProperty(i)) {\n            if ((i in obj2) && (typeof obj1[i] === 'object') && (i !== null)) {\n                result[i] = deepMerge(obj1[i], obj2[i]);\n            } else {\n                result[i] = obj1[i];\n            }\n        }\n    }\n    for (let /** @type {?} */ i in obj2) {\n        if (obj2.hasOwnProperty(i)) {\n            if (i in result) {\n                continue;\n            }\n            result[i] = obj2[i];\n        }\n\n    }\n    return result;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function buildQueryString(obj: object) {\n    return Object\n        .keys(obj)\n        .map((key) => !!obj[key] ? `${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}` : key)\n        .join('&');\n}\n/**\n * @param {?=} w\n * @return {?}\n */\nexport function getWindowOrigin(w = window) {\n    try {\n        if (!w || !w.location) {\n            return null;\n        }\n        if (!w.location.origin) {\n            return `${w.location.protocol}//${w.location.hostname}${w.location.port ? ':' + w.location.port : ''}`;\n        }\n        return w.location.origin;\n    } catch ( /** @type {?} */error) {\n        return null;\n        // ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\n        // error instanceof DOMException && error.name === 'SecurityError'\n    }\n}","import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { LOCAL_STORAGE, StorageType } from './storage-type.enum';\nimport { getWindowOrigin } from './utils';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport const CONFIG_OPTIONS = new InjectionToken<any>('config.options');\n\nexport interface IPopupOptions {\n    width?: number;\n    height?: number;\n    left?: number;\n    top?: number;\n    visibleToolbar?: boolean;\n}\n\nexport interface IOauth1Options {\n    url?: string;\n    name?: string;\n    redirectUri?: string;\n    popupOptions?: IPopupOptions;\n    authorizationEndpoint?: string;\n    oauthType?: '1.0';\n    method?: string;\n}\n\nexport interface IOauth2Options {\n    url?: string;\n    name?: string;\n    redirectUri?: string;\n    popupOptions?: IPopupOptions;\n    authorizationEndpoint?: string;\n    oauthType?: '2.0';\n    method?: string;\n    responseType?: string;\n    clientId?: string;\n    additionalUrlParams?: {\n        [paramName: string]: string | (() => string) | null | undefined;\n    };\n    scopeDelimiter?: string;\n    scope?: string[];\n    state?: string | (() => string);\n}\n\nexport interface IProviders {\n    [provider: string]: IOauth2Options | IOauth1Options;\n}\n\nexport interface IConfigOptions {\n    tokenRoot: string | null;\n    cordova: boolean | null;\n    baseUrl: string;\n    loginUrl: string;\n    signupUrl: string;\n    unlinkUrl: string;\n    tokenName: string;\n    tokenSeparator: string;\n    tokenPrefix: string;\n    authToken: string;\n    authHeader: string;\n    storageType: StorageType;\n    providers: IProviders;\n    withCredentials: boolean;\n    resolveToken: (response: any, config: IConfigOptions) => string;\n}\n\nexport interface IPartialConfigOptions { // = Partial<IConfigOptions\n    tokenRoot?: string | null;\n    cordova?: boolean | null;\n    baseUrl?: string;\n    loginUrl?: string;\n    signupUrl?: string;\n    unlinkUrl?: string;\n    tokenName?: string;\n    tokenSeparator?: string;\n    tokenPrefix?: string;\n    authToken?: string;\n    authHeader?: string;\n    storageType?: StorageType;\n    providers?: IProviders;\n    withCredentials?: boolean;\n    resolveToken?: (response: any, config: IConfigOptions) => string;\n}\n\nexport const /** @type {?} */ defaultOptions: IConfigOptions = {\n    withCredentials: false,\n    tokenRoot: null,\n    baseUrl: '/',\n    loginUrl: '/auth/login',\n    signupUrl: '/auth/signup',\n    unlinkUrl: '/auth/unlink/',\n    tokenName: 'token',\n    tokenSeparator: '_',\n    tokenPrefix: 'ng2-ui-auth',\n    authHeader: 'Authorization',\n    authToken: 'Bearer',\n    storageType: LOCAL_STORAGE,\n    cordova: null,\n    resolveToken: (response: any, config: IConfigOptions) => {\n        const /** @type {?} */ accessToken: string | { [key: string]: string } | null | undefined = response &&\n            (response.access_token || response.token || response.data);\n        if (!accessToken) {\n            // console.warn('No token found');\n            return null;\n        }\n        if (typeof accessToken === 'string') {\n            return accessToken;\n        }\n        if (typeof accessToken !== 'object') {\n            // console.warn('No token found');\n            return null;\n        }\n        const /** @type {?} */ tokenRootData = config.tokenRoot && config.tokenRoot\n            .split('.')\n            .reduce(\n            (o: any, x: any) => {\n                return o[x];\n            },\n            accessToken);\n        const /** @type {?} */ token = tokenRootData ? tokenRootData[config.tokenName] : accessToken[config.tokenName];\n        if (token) {\n            return token;\n        }\n        // const tokenPath = this.tokenRoot ? this.tokenRoot + '.' + this.tokenName : this.tokenName;\n        // console.warn('Expecting a token named \"' + tokenPath);\n        return null;\n    },\n    providers: {\n        facebook: {\n            name: 'facebook',\n            url: '/auth/facebook',\n            redirectUri: `${getWindowOrigin()}/`,\n            authorizationEndpoint: 'https://www.facebook.com/v2.5/dialog/oauth',\n            additionalUrlParams: {\n                display: 'popup',\n            },\n            scope: ['email'],\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: { width: 580, height: 400 },\n        },\n        google: {\n            name: 'google',\n            url: '/auth/google',\n            authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\n            additionalUrlParams: {\n                'display': 'popup',\n                'prompt': undefined,\n                'login_hint': undefined,\n                'access_type': undefined,\n                'include_granted_scopes': undefined,\n                'openid.realm': undefined,\n                'hd': undefined,\n            },\n            scope: ['openid', 'profile', 'email'],\n            scopeDelimiter: ' ',\n            oauthType: '2.0',\n            popupOptions: { width: 452, height: 633 },\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2)),\n        },\n        github: {\n            name: 'github',\n            url: '/auth/github',\n            authorizationEndpoint: 'https://github.com/login/oauth/authorize',\n            scope: ['user:email'],\n            scopeDelimiter: ' ',\n            oauthType: '2.0',\n            popupOptions: { width: 1020, height: 618 },\n        },\n        instagram: {\n            name: 'instagram',\n            url: '/auth/instagram',\n            authorizationEndpoint: 'https://api.instagram.com/oauth/authorize',\n            scope: ['basic'],\n            scopeDelimiter: '+',\n            oauthType: '2.0',\n        },\n        linkedin: {\n            name: 'linkedin',\n            url: '/auth/linkedin',\n            authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\n            scope: ['r_emailaddress'],\n            scopeDelimiter: ' ',\n            oauthType: '2.0',\n            popupOptions: { width: 527, height: 582 },\n            state: 'STATE',\n        },\n        twitter: {\n            name: 'twitter',\n            url: '/auth/twitter',\n            authorizationEndpoint: 'https://api.twitter.com/oauth/authenticate',\n            oauthType: '1.0',\n            popupOptions: { width: 495, height: 645 },\n        },\n        twitch: {\n            name: 'twitch',\n            url: '/auth/twitch',\n            authorizationEndpoint: 'https://api.twitch.tv/kraken/oauth2/authorize',\n            scope: ['user_read'],\n            scopeDelimiter: ' ',\n            additionalUrlParams: {\n                display: 'popup',\n            },\n            oauthType: '2.0',\n            popupOptions: { width: 500, height: 560 },\n        },\n        live: {\n            name: 'live',\n            url: '/auth/live',\n            authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\n            additionalUrlParams: {\n                display: 'popup',\n            },\n            scope: ['wl.emails'],\n            scopeDelimiter: ' ',\n            oauthType: '2.0',\n            popupOptions: { width: 500, height: 560 },\n        },\n        yahoo: {\n            name: 'yahoo',\n            url: '/auth/yahoo',\n            authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\n            scope: [],\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: { width: 559, height: 519 },\n        },\n        bitbucket: {\n            name: 'bitbucket',\n            url: '/auth/bitbucket',\n            authorizationEndpoint: 'https://bitbucket.org/site/oauth2/authorize',\n            redirectUri: `${getWindowOrigin()}/`,\n            scope: ['email'],\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: { width: 1028, height: 529 },\n        },\n        spotify: {\n            name: 'spotify',\n            url: '/auth/spotify',\n            authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n            scope: ['', 'user-read-email'],\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: { width: 500, height: 530 },\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2)),\n        },\n    },\n};\nexport class ConfigService {\npublic options: IConfigOptions;\n/**\n * @param {?} options\n */\nconstructor( options: IPartialConfigOptions) {\n        this.options = {\n            ...defaultOptions,\n            ...options,\n            providers: {\n                ...options.providers,\n                ...Object\n                    .keys(defaultOptions.providers)\n                    .concat(Object.keys(options.providers || {}))\n                    .map((key) => options.providers && options.providers[key]\n                        ? { [key]: { ...defaultOptions.providers[key], ...options.providers[key] } }\n                        : { [key]: defaultOptions.providers[key] })\n                    .reduce((acc, next) => ({ ...acc, ...next }), {}),\n            },\n        } as IConfigOptions;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [CONFIG_OPTIONS, ] }, ]},\n];\n}\n\nfunction ConfigService_tsickle_Closure_declarations() {\n/** @type {?} */\nConfigService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConfigService.ctorParameters;\n/** @type {?} */\nConfigService.prototype.options;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigService, IConfigOptions } from './config.service';\nimport { StorageType, MEMORY, COOKIE, SESSION_COOKIE, LOCAL_STORAGE, SESSION_STORAGE, NONE } from './storage-type.enum';\n/**\n * @abstract\n */\nexport abstract class StorageService {\n/**\n * @abstract\n * @param {?} storageType\n * @return {?}\n */\nupdateStorageType(storageType: StorageType) {}\n/**\n * @abstract\n * @param {?} key\n * @return {?}\n */\nget(key: string) {}\n/**\n * @abstract\n * @param {?} key\n * @param {?} value\n * @param {?} date\n * @return {?}\n */\nset(key: string, value: string, date: string) {}\n/**\n * @abstract\n * @param {?} key\n * @return {?}\n */\nremove(key: string) {}\n}\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class BrowserStorageService extends StorageService {\nprivate store: { [key: string]: string } = {};\nprivate storageType: StorageType = MEMORY;\n/**\n * @param {?} config\n */\nconstructor(private config: ConfigService) {\n        super();\n        if (!this.updateStorageType(config.options.storageType)) {\n            console.warn(config.options.storageType + ' is not available.');\n        }\n    }\n/**\n * @param {?} storageType\n * @return {?}\n */\npublic updateStorageType(storageType: StorageType) {\n        const /** @type {?} */ isStorageAvailable = this.checkIsStorageAvailable(storageType);\n        if (!isStorageAvailable) {\n            return false;\n        }\n        this.storageType = storageType;\n        return true;\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic async get(key: string) {\n        switch (this.storageType) {\n            case COOKIE:\n            case SESSION_COOKIE:\n                return this.getCookie(key);\n            case LOCAL_STORAGE:\n            case SESSION_STORAGE:\n                return window[this.storageType].getItem(key);\n            case MEMORY:\n                return this.store[key];\n            case NONE:\n            default:\n                return null;\n        }\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?} date\n * @return {?}\n */\npublic async set(key: string, value: string, date: string) {\n        switch (this.storageType) {\n            case COOKIE:\n            case SESSION_COOKIE:\n                this.setCookie(key, value, this.storageType === COOKIE ? date : '');\n                break;\n            case LOCAL_STORAGE:\n            case SESSION_STORAGE:\n                window[this.storageType].setItem(key, value);\n                break;\n            case MEMORY:\n                this.store[key] = value;\n                break;\n            case NONE:\n            default:\n                break;\n        }\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic async remove(key: string) {\n        switch (this.storageType) {\n            case COOKIE:\n            case SESSION_COOKIE:\n                this.removeCookie(key);\n                break;\n            case LOCAL_STORAGE:\n            case SESSION_STORAGE:\n                window[this.storageType].removeItem(key);\n                break;\n            case MEMORY:\n                delete this.store[key];\n                break;\n            case NONE:\n            default:\n                break;\n        }\n    }\n/**\n * @param {?} storageType\n * @return {?}\n */\nprivate checkIsStorageAvailable(storageType: StorageType) {\n        switch (storageType) {\n            case COOKIE:\n            case SESSION_COOKIE:\n                return this.isCookieStorageAvailable();\n            case LOCAL_STORAGE:\n            case SESSION_STORAGE:\n                return this.isWindowStorageAvailable(storageType);\n            case NONE:\n            case MEMORY:\n                return true;\n            default:\n                return false;\n        }\n    }\n/**\n * @param {?} storageType\n * @return {?}\n */\nprivate isWindowStorageAvailable(storageType: typeof SESSION_STORAGE | typeof LOCAL_STORAGE) {\n        try {\n            const /** @type {?} */ supported = window && storageType in window && window[storageType] !== null;\n\n            if (supported) {\n                const /** @type {?} */ key = Math.random().toString(36).substring(7);\n                window[storageType].setItem(key, '');\n                window[storageType].removeItem(key);\n            }\n\n            return supported;\n        } catch ( /** @type {?} */e) {\n            return false;\n        }\n    }\n/**\n * @return {?}\n */\nprivate isCookieStorageAvailable() {\n        try {\n            const /** @type {?} */ supported = document && 'cookie' in document;\n\n            if (supported) {\n                const /** @type {?} */ key = Math.random().toString(36).substring(7);\n                this.setCookie(key, 'test', new Date(Date.now() + 60 * 1000).toUTCString());\n                const /** @type {?} */ value = this.getCookie(key);\n                this.removeCookie(key);\n                return value === 'test';\n            }\n            return false;\n        } catch ( /** @type {?} */e) {\n            return false;\n        }\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?=} expires\n * @param {?=} path\n * @return {?}\n */\nprivate setCookie(key: string, value: string, expires = '', path = '/') {\n        document.cookie = `${key}=${value}${expires ? `; expires=${expires}` : ''}; path=${path}`;\n    }\n/**\n * @param {?} key\n * @param {?=} path\n * @return {?}\n */\nprivate removeCookie(key: string, path = '/') {\n        this.setCookie(key, '', new Date(0).toUTCString(), path);\n    }\n/**\n * @param {?} key\n * @return {?}\n */\nprivate getCookie(key: string) {\n        return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)${key}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), '$1');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConfigService, },\n];\n}\n\nfunction BrowserStorageService_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserStorageService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserStorageService.ctorParameters;\n/** @type {?} */\nBrowserStorageService.prototype.store;\n/** @type {?} */\nBrowserStorageService.prototype.storageType;\n/** @type {?} */\nBrowserStorageService.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Created by Ron on 17/12/2015.\n */\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subscriber } from 'rxjs/Subscriber';\nimport { Injectable } from '@angular/core';\nimport { ConfigService } from './config.service';\nimport { StorageService } from './storage.service';\nimport { StorageType } from './storage-type.enum';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class SharedService {\npublic tokenName = this.config.options.tokenPrefix\n        ? [this.config.options.tokenPrefix, this.config.options.tokenName].join(this.config.options.tokenSeparator)\n        : this.config.options.tokenName;\n/**\n * @param {?} storage\n * @param {?} config\n */\nconstructor(\nprivate storage: StorageService,\nprivate config: ConfigService) { }\n/**\n * @return {?}\n */\npublic async getToken() {\n        let /** @type {?} */ token = await this.storage.get(this.tokenName);\n        return token;\n    }\n/**\n * @param {?=} token\n * @return {?}\n */\npublic async getPayload(token?: string) {\n        token = token || await this.getToken();\n        if (!token) {\n          token = await this.getToken();\n        }\n\n        if (token && token.split('.').length === 3) {\n            try {\n                const /** @type {?} */ base64Url = token.split('.')[1];\n                const /** @type {?} */ base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n                return JSON.parse(this.b64DecodeUnicode(base64));\n            } catch ( /** @type {?} */e) {\n                return undefined;\n            }\n        }\n    }\n/**\n * @param {?} response\n * @return {?}\n */\npublic async setToken(response: string | object) {\n        if (!response) {\n            // console.warn('Can\\'t set token without passing a value');\n            return;\n        }\n\n        let /** @type {?} */ token: string;\n        if (typeof response === 'string') {\n            token = response;\n        } else {\n            token = this.config.options.resolveToken(response, this.config.options);\n        }\n\n        if (token) {\n            const /** @type {?} */ expDate = await this.getExpirationDate(token);\n            await this.storage.set(this.tokenName, token, expDate ? expDate.toUTCString() : '');\n        }\n    }\n/**\n * @return {?}\n */\npublic async removeToken() {\n        await this.storage.remove(this.tokenName);\n    }\n/**\n * @param {?=} token\n * @return {?}\n */\npublic async isAuthenticated(token?: string):Promise<boolean> {\n        token = token || await this.getToken();\n\n        // a token is present\n        if (token) {\n            // token with a valid JWT format XXX.YYY.ZZZ\n            if (token.split('.').length === 3) {\n                // could be a valid JWT or an access token with the same format\n                try {\n                    const /** @type {?} */ base64Url = token.split('.')[1];\n                    const /** @type {?} */ base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n                    const /** @type {?} */ exp = JSON.parse(this.b64DecodeUnicode(base64)).exp;\n                    // jwt with an optional expiration claims\n                    if (exp) {\n                        const /** @type {?} */ isExpired = Math.round(new Date().getTime() / 1000) >= exp;\n                        if (isExpired) {\n                            // fail: Expired token\n                            await this.storage.remove(this.tokenName);\n                            return false;\n                        } else {\n                            // pass: Non-expired token\n                            return true;\n                        }\n                    }\n                } catch ( /** @type {?} */e) {\n                    // pass: Non-JWT token that looks like JWT\n                    return true;\n                }\n            }\n            // pass: All other tokens\n            return true;\n        }\n        // lail: No token at all\n        return false;\n    }\n/**\n * @param {?=} token\n * @return {?}\n */\npublic async getExpirationDate(token?: string) {\n        token = token || await this.getToken();\n\n        const /** @type {?} */ payload = await this.getPayload(token);\n        if (payload && payload.exp && Math.round(new Date().getTime() / 1000) < payload.exp) {\n            const /** @type {?} */ date = new Date(0);\n            date.setUTCSeconds(payload.exp);\n            return date;\n        }\n        return null;\n    }\n/**\n * @return {?}\n */\npublic logout(): Observable<any> {\n        return Observable.create((observer: Subscriber<any>) => {\n            this.storage.remove(this.tokenName).then(() => {\n              observer.next();\n              observer.complete();\n            });\n        });\n    }\n/**\n * @param {?} type\n * @return {?}\n */\npublic setStorageType(type: StorageType) {\n        return this.storage.updateStorageType(type);\n    }\n/**\n * @param {?} str\n * @return {?}\n */\nprivate b64DecodeUnicode(str) {\n        return decodeURIComponent(\n            Array.prototype.map.call(atob(str),\n            c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2),\n        ).join(''));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: StorageService, },\n{type: ConfigService, },\n];\n}\n\nfunction SharedService_tsickle_Closure_declarations() {\n/** @type {?} */\nSharedService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSharedService.ctorParameters;\n/** @type {?} */\nSharedService.prototype.tokenName;\n/** @type {?} */\nSharedService.prototype.storage;\n/** @type {?} */\nSharedService.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { deepMerge, getWindowOrigin } from './utils';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { ConfigService, IPopupOptions, IOauth2Options, IOauth1Options } from './config.service';\nimport { switchMap, take, map, takeWhile, delay } from 'rxjs/operators';\nimport { interval } from 'rxjs/observable/interval';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { _throw } from 'rxjs/observable/throw';\nimport { empty } from 'rxjs/observable/empty';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class PopupService {\n/**\n * @param {?} url\n * @param {?} options\n * @param {?} cordova\n * @return {?}\n */\npublic open(url: string, options: IOauth2Options | IOauth1Options, cordova: boolean | null) {\n        const /** @type {?} */ stringifiedOptions = this.stringifyOptions(this.prepareOptions(options.popupOptions));\n        const /** @type {?} */ UA = window.navigator.userAgent;\n        cordova = cordova === null ? this.isCordovaApp() : cordova;\n        const /** @type {?} */ windowName = cordova ? '_blank' : options.name;\n\n        const /** @type {?} */ popupWindow = window.open(url, windowName, stringifiedOptions);\n\n        if (popupWindow && popupWindow.focus) {\n            popupWindow.focus();\n        }\n\n        return cordova\n            ? this.eventListener(popupWindow, options.redirectUri || getWindowOrigin())\n            : this.pollPopup(popupWindow, options.redirectUri || getWindowOrigin());\n    }\n/**\n * @param {?} popupWindow\n * @param {?} redirectUri\n * @return {?}\n */\npublic eventListener(popupWindow: Window, redirectUri: string) {\n        if (!popupWindow) {\n            throw new Error('Popup was not created');\n        }\n        return merge(\n            fromEvent<Event>(popupWindow, 'exit').pipe(\n                delay(100),\n                map(() => { throw new Error('Authentication Canceled'); }),\n            ),\n            fromEvent(popupWindow, 'loadstart'),\n        ).pipe(\n            switchMap((event: Event & { url: string }) => {\n                if (!popupWindow || popupWindow.closed) {\n                    return Observable.throw(new Error('Authentication Canceled'));\n                }\n                if (event.url.indexOf(redirectUri) !== 0) {\n                    return empty();\n                }\n\n                const /** @type {?} */ parser = document.createElement('a');\n                parser.href = event.url;\n\n                if (parser.search || parser.hash) {\n                    const /** @type {?} */ queryParams = parser.search.substring(1).replace(/\\/$/, '');\n                    const /** @type {?} */ hashParams = parser.hash.substring(1).replace(/\\/$/, '');\n                    const /** @type {?} */ hash = this.parseQueryString(hashParams);\n                    const /** @type {?} */ qs = this.parseQueryString(queryParams);\n                    const /** @type {?} */ allParams = { ...qs, ...hash };\n\n                    popupWindow.close();\n\n                    if (allParams.error) {\n                        throw allParams.error;\n                    } else {\n                        return of(allParams);\n                    }\n                }\n                return empty();\n            }),\n            take(1),\n        );\n    }\n/**\n * @param {?} popupWindow\n * @param {?} redirectUri\n * @return {?}\n */\npublic pollPopup(popupWindow: Window, redirectUri: string) {\n        return interval(50)\n            .pipe(\n            switchMap(() => {\n                if (!popupWindow || popupWindow.closed) {\n                    return _throw(new Error('Authentication Canceled'));\n                }\n\n                const /** @type {?} */ popupWindowOrigin = getWindowOrigin(popupWindow);\n\n                if (popupWindowOrigin &&\n                    (redirectUri.indexOf(popupWindowOrigin) === 0 || popupWindowOrigin.indexOf(redirectUri) === 0) &&\n                    (popupWindow.location.search || popupWindow.location.hash)) {\n                    const /** @type {?} */ queryParams = popupWindow.location.search.substring(1).replace(/\\/$/, '');\n                    const /** @type {?} */ hashParams = popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\n                    const /** @type {?} */ hash = this.parseQueryString(hashParams);\n                    const /** @type {?} */ qs = this.parseQueryString(queryParams);\n                    popupWindow.close();\n                    const /** @type {?} */ allParams = { ...qs, ...hash };\n                    if (allParams.error) {\n                        throw allParams.error;\n                    } else {\n                        return of(allParams);\n                    }\n                }\n                return empty();\n            }),\n            take(1),\n        );\n    }\n/**\n * @param {?=} options\n * @return {?}\n */\nprivate prepareOptions(options?: IPopupOptions) {\n        options = options || {};\n        const /** @type {?} */ width = options.width || 500;\n        const /** @type {?} */ height = options.height || 500;\n        return {\n            width,\n            height,\n            left: window.screenX + ((window.outerWidth - width) / 2),\n            top: window.screenY + ((window.outerHeight - height) / 2.5),\n            toolbar: options.visibleToolbar ? 'yes' : 'no',\n            ...options,\n        };\n    }\n/**\n * @param {?} options\n * @return {?}\n */\nprivate stringifyOptions(options: { [index: string]: string | number | boolean | null | undefined }) {\n        return Object.keys(options)\n            .map((key) => options[key] === null || options[key] === undefined\n                ? key\n                : key + '=' + options[key],\n        ).join(',');\n    }\n/**\n * @param {?} joinedKeyValue\n * @return {?}\n */\nprivate parseQueryString(joinedKeyValue: string): any {\n        let /** @type {?} */ key;\n        let /** @type {?} */ value;\n        return joinedKeyValue.split('&').reduce(\n            (obj, keyValue) => {\n                if (keyValue) {\n                    value = keyValue.split('=');\n                    key = decodeURIComponent(value[0]);\n                    obj[key] = typeof value[1] !== 'undefined' ? decodeURIComponent(value[1]) : true;\n                }\n                return obj;\n            }, /** @type {?} */((\n            {} as { [k: string]: string | true })));\n    }\n/**\n * @return {?}\n */\nprivate isCordovaApp() {\n        return !!(window && (\n            ( /** @type {?} */((window as any))).cordova ||\n            window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('CriOS') > -1\n        ));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PopupService_tsickle_Closure_declarations() {\n/** @type {?} */\nPopupService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPopupService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { IOauthService } from './oauth-service.interface';\nimport { Injectable } from '@angular/core';\nimport { PopupService } from './popup.service';\nimport { joinUrl, buildQueryString } from './utils';\nimport { ConfigService, IOauth1Options } from './config.service';\nimport { Observable } from 'rxjs/Observable';\nimport { switchMap } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class Oauth1Service implements IOauthService {\n/**\n * @param {?} http\n * @param {?} popup\n * @param {?} config\n */\nconstructor(\nprivate http: HttpClient,\nprivate popup: PopupService,\nprivate config: ConfigService,\n    ) { }\n/**\n * @template T\n * @param {?} oauthOptions\n * @param {?} userData\n * @return {?}\n */\nopen<T extends object | string = any>(oauthOptions: IOauth1Options, userData: object): Observable<T> {\n        const /** @type {?} */ serverUrl = this.config.options.baseUrl\n            ? joinUrl(this.config.options.baseUrl, oauthOptions.url)\n            : oauthOptions.url;\n\n        return this.http.post<object>(serverUrl, oauthOptions).pipe(\n            switchMap((authorizationData) => this.popup.open(\n                [oauthOptions.authorizationEndpoint, buildQueryString(authorizationData)].join('?'),\n                oauthOptions,\n                this.config.options.cordova,\n            ), (authorizationData, oauthData) => ({ authorizationData, oauthData })),\n            switchMap(({ authorizationData, oauthData }) => this.exchangeForToken<T>(oauthOptions, authorizationData, oauthData, userData)),\n        );\n    }\n/**\n * @template T\n * @param {?} oauthOptions\n * @param {?} authorizationData\n * @param {?} oauthData\n * @param {?} userData\n * @return {?}\n */\nprivate exchangeForToken<T>(oauthOptions: IOauth1Options, authorizationData: object, oauthData: object, userData: object) {\n        const /** @type {?} */ body = { authorizationData, oauthData, userData };\n        const { withCredentials, baseUrl } = this.config.options;\n        const { method = 'POST', url } = oauthOptions;\n        const /** @type {?} */ exchangeForTokenUrl = baseUrl ? joinUrl(baseUrl, url) : url;\n        return this.http.request<T>(method, exchangeForTokenUrl, { body, withCredentials })\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: PopupService, },\n{type: ConfigService, },\n];\n}\n\nfunction Oauth1Service_tsickle_Closure_declarations() {\n/** @type {?} */\nOauth1Service.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOauth1Service.ctorParameters;\n/** @type {?} */\nOauth1Service.prototype.http;\n/** @type {?} */\nOauth1Service.prototype.popup;\n/** @type {?} */\nOauth1Service.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { IOauthService } from './oauth-service.interface';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { joinUrl, deepMerge, buildQueryString, getWindowOrigin } from './utils';\nimport { ConfigService, IOauth2Options } from './config.service';\nimport { PopupService } from './popup.service';\nimport { StorageService } from './storage.service';\nimport { HttpClient } from '@angular/common/http';\nimport { switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs/observable/of';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class Oauth2Service implements IOauthService {\n/**\n * @param {?} http\n * @param {?} popup\n * @param {?} config\n */\nconstructor(\nprivate http: HttpClient,\nprivate popup: PopupService,\nprivate config: ConfigService) {\n    }\n/**\n * @template T\n * @param {?} oauthOptions\n * @param {?} userData\n * @return {?}\n */\nopen<T extends object | string = any>(oauthOptions: IOauth2Options, userData: object): Observable<T> {\n        const /** @type {?} */ authorizationData = this.getAuthorizationData(oauthOptions);\n        const /** @type {?} */ url = [oauthOptions.authorizationEndpoint, buildQueryString(authorizationData)].join('?');\n        return this.popup.open(url, oauthOptions, this.config.options.cordova).pipe(\n            switchMap((oauthData: any) => {\n                // when no server URL provided, return popup params as-is.\n                // this is for a scenario when someone wishes to opt out from\n                // satellizer's magic by doing authorization code exchange and\n                // saving a token manually.\n                if (oauthOptions.responseType === 'token' || !oauthOptions.url) {\n                    return of(oauthData);\n                }\n\n                if (oauthData.state && oauthData.state !== authorizationData.state) {\n                    throw new Error('OAuth \"state\" mismatch');\n                }\n                return this.exchangeForToken<T>(oauthOptions, authorizationData, oauthData, userData);\n            }),\n        );\n    }\n/**\n * @template T\n * @param {?} options\n * @param {?} authorizationData\n * @param {?} oauthData\n * @param {?} userData\n * @return {?}\n */\nprivate exchangeForToken<T>(options: IOauth2Options, authorizationData: object, oauthData: object, userData: object) {\n        const /** @type {?} */ body = { authorizationData, oauthData, userData };\n        const { baseUrl, withCredentials } = this.config.options;\n        const { url, method = 'POST' } = options;\n        const /** @type {?} */ exchangeForTokenUrl = baseUrl ? joinUrl(baseUrl, url) : url;\n        return this.http.request<T>(method, exchangeForTokenUrl, { body, withCredentials });\n    }\n/**\n * @param {?} options\n * @return {?}\n */\nprivate getAuthorizationData(options: IOauth2Options) {\n        const {\n            responseType = 'code',\n            clientId,\n            redirectUri = getWindowOrigin() || '',\n            scopeDelimiter = ',',\n            scope,\n            state,\n            additionalUrlParams,\n        } = options;\n        const /** @type {?} */ resolvedState = typeof state === 'function' ? state() : state;\n        return [\n            ['response_type', responseType],\n            ['client_id', clientId],\n            ['redirect_uri', redirectUri],\n            ...state ? [['state', resolvedState]] : [],\n            ...scope ? [['scope', scope.join(scopeDelimiter)]] : [],\n            ...additionalUrlParams\n                ? Object\n                    .keys(additionalUrlParams)\n                    .map((key) => {\n                        const /** @type {?} */ value: string | (() => string) | null | undefined =\n                            ( /** @type {?} */((additionalUrlParams as any)))[key];\n                        if (typeof value === 'string') {\n                            return [key, value];\n                        } else if (typeof value === 'function') {\n                            return [key, value()];\n                        } else if (value === null) {\n                            return [key, ''];\n                        }\n                        return ['', ''];\n                    })\n                : [],\n        ].filter((_) => !!_[0]).reduce((acc, next) => ({ ...acc, [next[0]]: next[1] }), /** @type {?} */(( {} as { [key: string]: string })));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: PopupService, },\n{type: ConfigService, },\n];\n}\n\nfunction Oauth2Service_tsickle_Closure_declarations() {\n/** @type {?} */\nOauth2Service.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOauth2Service.ctorParameters;\n/** @type {?} */\nOauth2Service.prototype.http;\n/** @type {?} */\nOauth2Service.prototype.popup;\n/** @type {?} */\nOauth2Service.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments, it will return an Observable. If `func` function\n   * calls its callback with one argument, the Observable will emit that value.\n   * If on the other hand callback is called with multiple values, resulting\n   * Observable will emit an array with these arguments.\n   *\n   * It is very important to remember, that input function `func` is not called\n   * when output function is, but rather when Observable returned by output\n   * function is subscribed. This means if `func` makes AJAX request, that request\n   * will be made every time someone subscribes to resulting Observable, but not before.\n   *\n   * Optionally, selector function can be passed to `bindObservable`. That function\n   * takes the same arguments as callback, and returns value\n   * that will be emitted by Observable instead of callback parameters themselves.\n   * Even though by default multiple arguments passed to callback appear in the stream as array,\n   * selector function will be called with arguments directly, just as callback would.\n   * This means you can imagine default selector (when one is not provided explicitly)\n   * as function that aggregates all its arguments into array, or simply returns first argument,\n   * if there is only one.\n   *\n   * Last optional parameter - {@link Scheduler} - can be used to control when call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default subscription to Observable calls `func`\n   * synchronously, but using `Scheduler.async` as last parameter will defer call to input function,\n   * just like wrapping that call in `setTimeout` with time `0` would. So if you use async Scheduler\n   * and call `subscribe` on output Observable, all function calls that are currently executing,\n   * will end before `func` is invoked.\n   *\n   * When it comes to emitting results passed to callback, by default they are emitted\n   * immediately after `func` invokes callback. In particular, if callback is called synchronously,\n   * then subscription to resulting Observable will call `next` function synchronously as well.\n   * If you want to defer that call, using `Scheduler.async` will, again, do the job.\n   * This means that by using `Scheduler.async` you can, in a sense, ensure that `func`\n   * always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that Observable created by output function will always emit only one value\n   * and then complete right after. Even if `func` calls callback multiple times, values from\n   * second and following calls will never appear in the stream. If you need to\n   * listen for multiple calls, you probably want to use {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property), that context will be set\n   * to the same context that output function has at call time. In particular, if `func`\n   * is called as method of some object, in order to preserve proper behaviour,\n   * it is recommended to set context of output function to that object as well,\n   * provided `func` is not already bound.\n   *\n   * If input function calls its callback in \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions without any difference and error parameter\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive array of arguments passed to callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions | SelectorMethodSignature<T>,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options as EventListenerOptions | undefined);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector as ResultFunc<S, T>,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector as ResultFunc<S, T>,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { GenerateObservable } from './GenerateObservable';\n\nexport const generate = GenerateObservable.create;\n","import { Observable } from '../../Observable';\nimport { generate as staticGenerate } from '../../observable/generate';\n\nObservable.generate = staticGenerate;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof staticGenerate;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { mergeAll } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { merge as higherOrder } from '../operators/merge';\n\nexport { mergeStatic } from '../operators/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return higherOrder(...observables)(this) as Observable<R>;\n}\n","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { race as staticRace } from '../../observable/race';\n\nObservable.race = staticRace;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof staticRace;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please note\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { onErrorResumeNextStatic } from '../operators/onErrorResumeNext';\n\nexport const onErrorResumeNext = onErrorResumeNextStatic;\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext as staticOnErrorResumeNext } from '../../observable/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = staticOnErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof staticOnErrorResumeNext;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import {  zipStatic  } from '../operators/zip';\n\nexport const zip = zipStatic;\n","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { map } from '../../operators/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PATCH', url, body, headers });\n};\n\nconst mapResponse = map((x: AjaxResponse, index: number) => x.response);\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return mapResponse(\n    new AjaxObservable<AjaxResponse>({\n      method: 'GET',\n      url,\n      responseType: 'json',\n      headers\n    })\n  );\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout, responseType and withCredentials can be set once the XHR is open\n      if (async) {\n        xhr.timeout = request.timeout;\n        xhr.responseType = request.responseType as any;\n      }\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\nfunction parseXhrResponse(responseType: string, xhr: XMLHttpRequest) {\n  switch (responseType) {\n    case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          return JSON.parse(xhr.responseText || 'null');\n        }\n      case 'xml':\n        return xhr.responseXML;\n      case 'text':\n      default:\n        return  ('response' in xhr) ? xhr.response : xhr.responseText;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let socket$ = Observable.webSocket('ws://localhost:8081');\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket$ = Observable.webSocket({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { buffer as higherOrder } from '../operators/buffer';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return higherOrder(closingNotifier)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferCount as higherOrder } from '../operators/bufferCount';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return higherOrder(bufferSize, startBufferEvery)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { bufferTime as higherOrder } from '../operators/bufferTime';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return higherOrder(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { bufferToggle as higherOrder } from '../operators/bufferToggle';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return higherOrder(openings, closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferWhen as higherOrder } from '../operators/bufferWhen';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return higherOrder(closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { catchError as higherOrder } from '../operators/catchError';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<T | R> {\n  return higherOrder(selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from '../operators/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../Observable';\nimport { combineAll as higherOrder } from '../operators/combineAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { combineLatest as higherOrder } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { concat as higherOrder } from '../operators/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { concatAll as higherOrder } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return mergeMap(project, resultSelector, 1);\n}\n","import { concatMap as higherOrderConcatMap } from '../operators/concatMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return higherOrderConcatMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { concatMap } from './concatMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(\n  innerObservable: Observable<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R> {\n  return concatMap(() => innerObservable, resultSelector);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { concatMapTo as higherOrder } from '../operators/concatMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { count as higherOrder } from '../operators/count';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { dematerialize as higherOrder } from '../operators/dematerialize';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<Notification<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { debounce as higherOrder } from '../operators/debounce';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { debounceTime as higherOrder } from '../operators/debounceTime';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(dueTime, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","\nimport { Observable } from '../Observable';\nimport { defaultIfEmpty as higherOrder } from '../operators/defaultIfEmpty';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return higherOrder<T, R>(defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { delay as higherOrder } from '../operators/delay';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  return higherOrder<T>(delay, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { delayWhen as higherOrder } from '../operators/delayWhen';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  return higherOrder(delayDurationSelector, subscriptionDelay)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../Observable';\nimport { distinct as higherOrder } from '../operators/distinct';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return higherOrder(keySelector, flushes)(this);\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilChanged as higherOrder } from '../operators/distinctUntilChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return higherOrder(compare, keySelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;\nexport function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T> {\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilKeyChanged as higherOrder } from '../operators/distinctUntilKeyChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return higherOrder<T, T>(key, compare)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { tap as higherOrder } from '../operators/tap';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return higherOrder(<any>nextOrObserver, error, complete)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { exhaust as higherOrder } from '../operators/exhaust';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { exhaustMap as higherOrder } from '../operators/exhaustMap';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { expand as higherOrder } from '../operators/expand';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return higherOrder(project, concurrent, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { elementAt as higherOrder } from '../operators/elementAt';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return higherOrder(index, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","\nimport { Observable } from '../Observable';\nimport { filter as higherOrderFilter } from '../operators/filter';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return higherOrderFilter(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { finalize } from '../operators/finalize';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return finalize(callback)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { find as higherOrder } from '../operators/find';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { FindValueOperator } from '../operators/find';\nimport { OperatorFunction } from '../interfaces';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, true, thisArg)) as Observable<any>;\n}\n","import { Observable } from '../Observable';\nimport { findIndex as higherOrder } from '../operators/findIndex';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { first as higherOrder } from '../operators/first';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { groupBy as higherOrder, GroupedObservable } from '../operators/groupBy';\nexport { GroupedObservable };\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return higherOrder(keySelector, elementSelector as any, durationSelector, subjectSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Observable } from '../Observable';\nimport { ignoreElements as higherOrder } from '../operators/ignoreElements';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { isEmpty as higherOrder } from '../operators/isEmpty';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { audit as higherOrder } from '../operators/audit';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { auditTime as higherOrder } from '../operators/auditTime';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(duration, scheduler)(this) as Observable<T>;\n}","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { last as higherOrder } from '../operators/last';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { every as higherOrder } from '../operators/every';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return higherOrder(predicate, thisArg)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Observable } from '../Observable';\nimport { mapTo as higherOrder } from '../operators/mapTo';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { materialize as higherOrder } from '../operators/materialize';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return higherOrder()(this) as Observable<Notification<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n","import { Observable } from '../Observable';\nimport { max as higherOrderMax } from '../operators/max';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMax(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { mergeAll as higherOrder } from '../operators/mergeAll';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): Observable<T> {\n  return higherOrder(concurrent)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  return higherOrderMergeMap(project, <any>resultSelector, concurrent)(this) as Observable<I | R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMapTo as higherOrder } from '../operators/mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(innerObservable, resultSelector as any, concurrent)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { mergeScan as higherOrder } from '../operators/mergeScan';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(accumulator, seed, concurrent)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n","import { Observable } from '../Observable';\nimport { min as higherOrderMin } from '../operators/min';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMin(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { multicast as higherOrder } from '../operators/multicast';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): Observable<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(<any>subjectOrSubjectFactory, selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { observeOn as higherOrder } from '../operators/observeOn';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { onErrorResumeNext as higherOrder } from '../operators/onErrorResumeNext';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...nextSources)(this);\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Observable } from '../Observable';\nimport { pairwise as higherOrder } from '../operators/pairwise';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return higherOrder()(this) as Observable<[T, T]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T, index: number) => boolean,\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) => [\n    filter(predicate, thisArg)(source),\n    filter(not(predicate, thisArg) as any)(source)\n  ] as [Observable<T>, Observable<T>];\n}\n","import { Observable } from '../Observable';\nimport { partition as higherOrder } from '../operators/partition';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Observable } from '../Observable';\nimport { pluck as higherOrder } from '../operators/pluck';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  return higherOrder(...properties)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publish as higherOrder } from '../operators/publish';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: (source: Observable<T>) => Observable<T>): Observable<T>;\nexport function publish<T, R>(this: Observable<T>, selector: (source: Observable<T>) => Observable<R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(selector)(this);\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T):  UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new BehaviorSubject<T>(value))(source) as ConnectableObservable<T>;\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishBehavior as higherOrder } from '../operators/publishBehavior';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<R> | Observable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as Observable<R> | ConnectableObservable<R>;\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishReplay as higherOrder } from '../operators/publishReplay';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler): ConnectableObservable<T>;\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): Observable<T>;\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): Observable<R> | ConnectableObservable<R> {\n\n  return higherOrder<T, R>(bufferSize, windowTime, selectorOrScheduler as any, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishLast as higherOrder } from '../operators/publishLast';\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  //TODO(benlesh): correct type-flow through here.\n  return higherOrder()(this) as ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = <Array<Observable<T>>>observables[0];\n    }\n\n    return source.lift.call(raceStatic<T>(source, ...observables));\n  };\n}","import { Observable } from '../Observable';\nimport { race as higherOrder } from '../operators/race';\n\n// NOTE: to support backwards compatability with 5.4.* and lower\nexport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, observables: Array<Observable<T>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, observables: Array<Observable<T>>): Observable<R>;\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { reduce as higherOrderReduce } from '../operators/reduce';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return higherOrderReduce(accumulator, seed)(this);\n  }\n\n  return higherOrderReduce(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { repeat as higherOrder } from '../operators/repeat';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Observable } from '../Observable';\nimport { repeatWhen as higherOrder } from '../operators/repeatWhen';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { retry as higherOrder } from '../operators/retry';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Observable } from '../Observable';\nimport { retryWhen as higherOrder } from '../operators/retryWhen';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { sample as higherOrder } from '../operators/sample';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { sampleTime as higherOrder } from '../operators/sampleTime';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(period, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { scan as higherOrderScan } from '../operators/scan';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  if (arguments.length >= 2) {\n    return higherOrderScan(accumulator, seed)(this) as Observable<R>;\n  }\n  return higherOrderScan(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { sequenceEqual as higherOrder } from '../operators/sequenceEqual';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return higherOrder(compareTo, comparor)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","import { Observable } from '../Observable';\nimport { share as higherOrder } from '../operators/share';\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { shareReplay as higherOrder } from '../operators/shareReplay';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler):\n  Observable<T> {\n  return higherOrder(bufferSize, windowTime, scheduler)(this) as Observable<T>;\n};","\nimport { Observable } from '../../Observable';\nimport { shareReplay } from '../../operator/shareReplay';\n\nObservable.prototype.shareReplay = shareReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    shareReplay: typeof shareReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { single as higherOrder } from '../operators/single';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skip as higherOrder } from '../operators/skip';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { skipLast as higherOrder } from '../operators/skipLast';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { skipLast } from '../../operator/skipLast';\n\nObservable.prototype.skipLast = skipLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipLast: typeof skipLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipUntil as higherOrder } from '../operators/skipUntil';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipWhile as higherOrder } from '../operators/skipWhile';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(v1: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len === 1) {\n      return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), source);\n    } else if (len > 1) {\n      return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), source);\n    } else {\n      return concatStatic(new EmptyObservable<T>(scheduler), source);\n    }\n  };\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { startWith as higherOrder } from '../operators/startWith';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  return higherOrder(...array)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function subscribeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new SubscribeOnOperator<T>(scheduler, delay));\n  };\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn as higherOrder } from '../operators/subscribeOn';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { OperatorFunction } from '../interfaces';\nimport { Observable } from '../Observable';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<Observable<T>, T> {\n  return switchMap(identity);\n}\n","import { Observable } from '../Observable';\nimport { switchAll as higherOrder } from '../operators/switchAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<Observable<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { switchMap as higherOrderSwitchMap } from '../operators/switchMap';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return higherOrderSwitchMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { switchMapTo as higherOrder } from '../operators/switchMapTo';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { take as higherOrder } from '../operators/take';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { takeLast as higherOrderTakeLast } from '../operators/takeLast';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrderTakeLast(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeUntil as higherOrder } from '../operators/takeUntil';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeWhile as higherOrder } from '../operators/takeWhile';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { throttle as higherOrder, ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>,\n                            durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(durationSelector, config)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\nimport { throttleTime as higherOrder } from '../operators/throttleTime';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>,\n                                duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(duration, scheduler, config)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timeInterval as higherOrder, TimeInterval } from '../operators/timeInterval';\nexport {TimeInterval};\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return higherOrder(scheduler)(this) as Observable<TimeInterval<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { timeout as higherOrder } from '../operators/timeout';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(due, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable, ObservableInput } from '../Observable';\nimport { timeoutWith as higherOrder } from '../operators/timeoutWith';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  return higherOrder(due, withObservable, scheduler)(this as any);\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\nimport { map } from './map';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: IScheduler = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timestamp as higherOrder } from '../operators/timestamp';\nimport { Timestamp } from '../operators/timestamp';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return higherOrder(scheduler)(this) as Observable<Timestamp<T>>;\n}\n","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","\nimport { Observable } from '../Observable';\nimport { toArray as higherOrder } from '../operators/toArray';\n\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return higherOrder()(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { window as higherOrder } from '../operators/window';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return higherOrder(windowBoundaries)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowCount as higherOrder } from '../operators/windowCount';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return higherOrder(windowSize, startWindowEvery)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { windowTime as higherOrder } from '../operators/windowTime';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\n\nexport function windowTime<T>(this: Observable<T>,\n                              windowTimeSpan: number): Observable<Observable<T>> {\n\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return higherOrder(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowToggle as higherOrder } from '../operators/windowToggle';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(openings, closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowWhen as higherOrder } from '../operators/windowWhen';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { withLatestFrom as higherOrder } from '../operators/withLatestFrom';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...args)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { zip as higherOrder } from '../operators/zip';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T>(this: Observable<T>, ...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new ZipOperator(project));\n}\n","import { Observable } from '../Observable';\nimport { zipAll as higherOrder } from '../operators/zipAll';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/shareReplay';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipLast';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operators/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\nexport { pipe } from './util/pipe';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { rxSubscriber } from './symbol/rxSubscriber';\nimport { iterator } from './symbol/iterator';\nimport { observable } from './symbol/observable';\n\nimport * as _operators from './operators';\n\nexport const operators = _operators;\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","export { audit } from './audit';\nexport { auditTime } from './auditTime';\nexport { buffer } from './buffer';\nexport { bufferCount } from './bufferCount';\nexport { bufferTime } from './bufferTime';\nexport { bufferToggle } from './bufferToggle';\nexport { bufferWhen } from './bufferWhen';\nexport { catchError } from './catchError';\nexport { combineAll } from './combineAll';\nexport { combineLatest } from './combineLatest';\nexport { concat } from './concat';\nexport { concatAll } from './concatAll';\nexport { concatMap } from './concatMap';\nexport { concatMapTo } from './concatMapTo';\nexport { count } from './count';\nexport { debounce } from './debounce';\nexport { debounceTime } from './debounceTime';\nexport { defaultIfEmpty } from './defaultIfEmpty';\nexport { delay } from './delay';\nexport { delayWhen } from './delayWhen';\nexport { dematerialize } from './dematerialize';\nexport { distinct } from './distinct';\nexport { distinctUntilChanged } from './distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './distinctUntilKeyChanged';\nexport { elementAt } from './elementAt';\nexport { every } from './every';\nexport { exhaust } from './exhaust';\nexport { exhaustMap } from './exhaustMap';\nexport { expand } from './expand';\nexport { filter } from './filter';\nexport { finalize } from './finalize';\nexport { find } from './find';\nexport { findIndex } from './findIndex';\nexport { first } from './first';\nexport { groupBy } from './groupBy';\nexport { ignoreElements } from './ignoreElements';\nexport { isEmpty } from './isEmpty';\nexport { last } from './last';\nexport { map } from './map';\nexport { mapTo } from './mapTo';\nexport { materialize } from './materialize';\nexport { max } from './max';\nexport { merge } from './merge';\nexport { mergeAll } from './mergeAll';\nexport { mergeMap } from './mergeMap';\nexport { mergeMap as flatMap } from './mergeMap';\nexport { mergeMapTo } from './mergeMapTo';\nexport { mergeScan } from './mergeScan';\nexport { min } from './min';\nexport { multicast } from './multicast';\nexport { observeOn } from './observeOn';\nexport { onErrorResumeNext } from './onErrorResumeNext';\nexport { pairwise } from './pairwise';\nexport { partition } from './partition';\nexport { pluck } from './pluck';\nexport { publish } from './publish';\nexport { publishBehavior } from './publishBehavior';\nexport { publishLast } from './publishLast';\nexport { publishReplay } from './publishReplay';\nexport { race } from './race';\nexport { reduce } from './reduce';\nexport { repeat } from './repeat';\nexport { repeatWhen } from './repeatWhen';\nexport { retry } from './retry';\nexport { retryWhen } from './retryWhen';\nexport { refCount } from './refCount';\nexport { sample } from './sample';\nexport { sampleTime } from './sampleTime';\nexport { scan } from './scan';\nexport { sequenceEqual } from './sequenceEqual';\nexport { share } from './share';\nexport { shareReplay } from './shareReplay';\nexport { single } from './single';\nexport { skip } from './skip';\nexport { skipLast } from './skipLast';\nexport { skipUntil } from './skipUntil';\nexport { skipWhile } from './skipWhile';\nexport { startWith } from './startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './subscribeOn';\nexport { switchAll } from './switchAll';\nexport { switchMap } from './switchMap';\nexport { switchMapTo } from './switchMapTo';\nexport { take } from './take';\nexport { takeLast } from './takeLast';\nexport { takeUntil } from './takeUntil';\nexport { takeWhile } from './takeWhile';\nexport { tap } from './tap';\nexport { throttle } from './throttle';\nexport { throttleTime } from './throttleTime';\nexport { timeInterval } from './timeInterval';\nexport { timeout } from './timeout';\nexport { timeoutWith } from './timeoutWith';\nexport { timestamp } from './timestamp';\nexport { toArray } from './toArray';\nexport { window } from './window';\nexport { windowCount } from './windowCount';\nexport { windowTime } from './windowTime';\nexport { windowToggle } from './windowToggle';\nexport { windowWhen } from './windowWhen';\nexport { withLatestFrom } from './withLatestFrom';\nexport { zip } from './zip';\nexport { zipAll } from './zipAll';\n","import { IOauthService } from './oauth-service.interface';\nimport { StorageService } from './storage.service';\nimport { PopupService } from './popup.service';\nimport { Injectable, Injector, Provider, ReflectiveInjector } from '@angular/core';\nimport { Oauth1Service } from './oauth1.service';\nimport { Oauth2Service } from './oauth2.service';\nimport { SharedService } from './shared.service';\nimport { joinUrl } from './utils';\nimport { ConfigService, IOauth1Options } from './config.service';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { HttpClient, HttpRequest } from '@angular/common/http';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class OauthService {\n    readonly depProviders = [\n        { provide: HttpClient, useValue: this.http },\n        { provide: PopupService, useValue: this.popup },\n        { provide: ConfigService, useValue: this.config },\n    ];\n    readonly deps = [HttpClient, PopupService, ConfigService];\n/**\n * @param {?} http\n * @param {?} shared\n * @param {?} config\n * @param {?} popup\n */\nconstructor(\nprivate http: HttpClient,\nprivate shared: SharedService,\nprivate config: ConfigService,\nprivate popup: PopupService) { }\n/**\n * @template T\n * @param {?} name\n * @param {?=} userData\n * @return {?}\n */\npublic authenticate<T extends object | string>(name: string, userData?: any): Observable<T> {\n        const /** @type {?} */ provider: IOauthService = this.providerOf(name);\n\n        return provider.open<T>(this.config.options.providers[name], userData || {})\n            .pipe(switchMap((response) => {\n                // this is for a scenario when someone wishes to opt out from\n                // satellizer's magic by doing authorization code exchange and\n                // saving a token manually.\n                if (this.config.options.providers[name].url) {\n                    return Observable.from(this.shared.setToken(response)).map(() => response);\n                }\n\n                return Observable.of(response);\n            }));\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprotected providerOf(name: string):IOauthService {\n      return this.config.options.providers[name].oauthType === '1.0'\n        ? Injector.create([\n          ...this.depProviders,\n          { provide: Oauth1Service, deps: this.deps },\n        ]).get(Oauth1Service)\n        : Injector.create([\n          ...this.depProviders,\n          { provide: Oauth2Service, deps: this.deps },\n        ]).get(Oauth2Service);\n    }\n/**\n * @template T\n * @param {?} provider\n * @param {?=} url\n * @param {?=} method\n * @return {?}\n */\npublic unlink<T>(\n        provider: string,\n        url = joinUrl(this.config.options.baseUrl, this.config.options.unlinkUrl),\n        method = 'POST') {\n        return this.http.request<T>(method, url, { body: { provider } });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: SharedService, },\n{type: ConfigService, },\n{type: PopupService, },\n];\n}\n\nfunction OauthService_tsickle_Closure_declarations() {\n/** @type {?} */\nOauthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOauthService.ctorParameters;\n/** @type {?} */\nOauthService.prototype.depProviders;\n/** @type {?} */\nOauthService.prototype.deps;\n/** @type {?} */\nOauthService.prototype.http;\n/** @type {?} */\nOauthService.prototype.shared;\n/** @type {?} */\nOauthService.prototype.config;\n/** @type {?} */\nOauthService.prototype.popup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { SharedService } from './shared.service';\nimport { ConfigService } from './config.service';\nimport { joinUrl } from './utils';\nimport { Observable } from 'rxjs/Observable';\nimport { tap } from 'rxjs/operators';\nimport { HttpClient, HttpRequest } from '@angular/common/http';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class LocalService {\n/**\n * @param {?} http\n * @param {?} shared\n * @param {?} config\n */\nconstructor(\nprivate http: HttpClient,\nprivate shared: SharedService,\nprivate config: ConfigService) { }\n/**\n * @template T\n * @param {?} user\n * @param {?=} url\n * @return {?}\n */\npublic login<T extends string | object>(user: string | object, url?: string): Observable<T> {\n        return this.http.post<T>(url || joinUrl(this.config.options.baseUrl, this.config.options.loginUrl), user)\n            .pipe(tap((data) => this.shared.setToken(data)));\n    }\n/**\n * @template T\n * @param {?} user\n * @param {?=} url\n * @return {?}\n */\npublic signup<T = any>(user: string | object, url?: string): Observable<T> {\n        return this.http.post<T>(url || joinUrl(this.config.options.baseUrl, this.config.options.signupUrl), user);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: SharedService, },\n{type: ConfigService, },\n];\n}\n\nfunction LocalService_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalService.ctorParameters;\n/** @type {?} */\nLocalService.prototype.http;\n/** @type {?} */\nLocalService.prototype.shared;\n/** @type {?} */\nLocalService.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { SharedService } from './shared.service';\nimport { LocalService } from './local.service';\nimport { OauthService } from './oauth.service';\nimport { Observable } from 'rxjs/Observable';\nimport { StorageType } from './storage-type.enum';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class AuthService {\n/**\n * @param {?} shared\n * @param {?} local\n * @param {?} oauth\n */\nconstructor(private shared: SharedService,\nprivate local: LocalService,\nprivate oauth: OauthService) {\n    }\n/**\n * @template T\n * @param {?} user\n * @param {?=} url\n * @return {?}\n */\npublic login<T extends string | object = any>(user: string | object, url?: string): Observable<T> {\n        return this.local.login<T>(user, url);\n    }\n/**\n * @template T\n * @param {?} user\n * @param {?=} url\n * @return {?}\n */\npublic signup<T = any>(user: string | object, url?: string): Observable<T> {\n        return this.local.signup<T>(user, url);\n    }\n/**\n * @return {?}\n */\npublic logout(): Observable<void> {\n        return this.shared.logout();\n    }\n/**\n * @template T\n * @param {?} name\n * @param {?=} userData\n * @return {?}\n */\npublic authenticate<T = any>(name: string, userData?: any): Observable<T> {\n        return this.oauth.authenticate<T>(name, userData);\n    }\n/**\n * @template T\n * @param {?} name\n * @param {?=} userData\n * @return {?}\n */\npublic link<T = any>(name: string, userData?: any): Observable<T> {\n        return this.oauth.authenticate<T>(name, userData);\n    }\n/**\n * @template T\n * @param {?} provider\n * @param {?=} url\n * @return {?}\n */\npublic unlink<T = any>(provider: string, url?: string): Observable<T> {\n        return this.oauth.unlink<T>(provider, url);\n    }\n/**\n * @return {?}\n */\npublic isAuthenticated(): Promise<boolean> {\n        return this.shared.isAuthenticated();\n    }\n/**\n * @return {?}\n */\npublic getToken(): Promise<string | null> {\n        return this.shared.getToken();\n    }\n/**\n * @param {?} token\n * @return {?}\n */\npublic setToken(token: string | object): Promise<void> {\n        return this.shared.setToken(token);\n    }\n/**\n * @return {?}\n */\npublic removeToken(): Promise<void> {\n        return this.shared.removeToken();\n    }\n/**\n * @return {?}\n */\npublic getPayload(): Promise<any> {\n        return this.shared.getPayload();\n    }\n/**\n * @param {?} type\n * @return {?}\n */\npublic setStorageType(type: StorageType): boolean {\n        return this.shared.setStorageType(type);\n    }\n/**\n * @return {?}\n */\npublic getExpirationDate(): Promise<Date | null> {\n        return this.shared.getExpirationDate();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SharedService, },\n{type: LocalService, },\n{type: OauthService, },\n];\n}\n\nfunction AuthService_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthService.ctorParameters;\n/** @type {?} */\nAuthService.prototype.shared;\n/** @type {?} */\nAuthService.prototype.local;\n/** @type {?} */\nAuthService.prototype.oauth;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { switchMapTo } from 'rxjs/operators';\nimport { ConfigService } from './config.service';\nimport { SharedService } from './shared.service';\nimport { Injectable, Injector } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { tap, catchError } from 'rxjs/operators';\nexport class JwtInterceptor implements HttpInterceptor {\n/**\n * @param {?} shared\n * @param {?} config\n */\nconstructor(\nprivate shared: SharedService,\nprivate config: ConfigService,\n    ) { }\n/**\n * @param {?} req\n * @param {?} next\n * @return {?}\n */\nintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { authHeader, authToken } = this.config.options;\n\n        return Observable\n            .fromPromise(Promise.all([this.shared.getToken(), this.shared.isAuthenticated()]))\n            .switchMap((auth) => {\n                const /** @type {?} */ token = auth[0];\n                const /** @type {?} */ isAuthenticated = auth[1];\n\n                const /** @type {?} */ newReq = isAuthenticated && !req.headers.has(authHeader)\n                  ? req.clone({ setHeaders: { [authHeader]: `${authToken} ${token}` } })\n                  : req;\n                return next.handle(newReq);\n            }) ;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SharedService, },\n{type: ConfigService, },\n];\n}\n\nfunction JwtInterceptor_tsickle_Closure_declarations() {\n/** @type {?} */\nJwtInterceptor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJwtInterceptor.ctorParameters;\n/** @type {?} */\nJwtInterceptor.prototype.shared;\n/** @type {?} */\nJwtInterceptor.prototype.config;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Created by Ron on 25/12/2015.\n */\n\nimport { ConfigService, IPartialConfigOptions, CONFIG_OPTIONS, IProviders } from './config.service';\nimport { SharedService } from './shared.service';\nimport { OauthService } from './oauth.service';\nimport { PopupService } from './popup.service';\nimport { Oauth1Service } from './oauth1.service';\nimport { Oauth2Service } from './oauth2.service';\nimport { LocalService } from './local.service';\nimport { AuthService } from './auth.service';\nimport { JwtInterceptor } from './interceptor.service';\nimport { StorageService, BrowserStorageService } from './storage.service';\nimport { InjectionToken, ModuleWithProviders, NgModule, Type } from '@angular/core';\nimport { HTTP_INTERCEPTORS, HttpClientModule, HttpClient } from '@angular/common/http';\nimport { StorageType } from './storage-type.enum';\nexport class Ng2UiAuthModule {\n/**\n * @param {?=} configOptions\n * @param {?=} defaultJwtInterceptor\n * @return {?}\n */\nstatic forRoot(configOptions?: IPartialConfigOptions, defaultJwtInterceptor = true): ModuleWithProviders {\n        return {\n            ngModule: Ng2UiAuthModule,\n            providers: [\n                ...configOptions ? [{ provide: CONFIG_OPTIONS, useValue: configOptions }] : [],\n                { provide: ConfigService, useClass: ConfigService, deps: [CONFIG_OPTIONS] },\n                { provide: StorageService, useClass: BrowserStorageService, deps: [ConfigService] },\n                { provide: SharedService, useClass: SharedService, deps: [StorageService, ConfigService] },\n                ...defaultJwtInterceptor ? [{ provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true, deps: [SharedService, ConfigService] }] : [],\n                { provide: OauthService, useClass: OauthService, deps: [HttpClient, SharedService, ConfigService, PopupService] },\n                { provide: PopupService, useClass: PopupService, deps: [ConfigService] },\n                { provide: LocalService, useClass: LocalService, deps: [HttpClient, SharedService, ConfigService] },\n                { provide: AuthService, useClass: AuthService, deps: [SharedService, LocalService, OauthService] },\n            ],\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{ imports: [HttpClientModule] }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Ng2UiAuthModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2UiAuthModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNg2UiAuthModule.ctorParameters;\n}\n\n\nexport {\n    LocalService,\n    Oauth2Service,\n    Oauth1Service,\n    PopupService,\n    OauthService,\n    SharedService,\n    StorageService, BrowserStorageService,\n    AuthService,\n    ConfigService, IPartialConfigOptions,\n    JwtInterceptor,\n    CONFIG_OPTIONS,\n    IProviders,\n    StorageType,\n};\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["NONE","MEMORY","LOCAL_STORAGE","SESSION_STORAGE","COOKIE","SESSION_COOKIE","joinUrl","baseUrl","url","test","joined","join","replace","buildQueryString","obj","Object","keys","map","key","encodeURIComponent","getWindowOrigin","w","window","location","origin","protocol","hostname","port","error","CONFIG_OPTIONS","InjectionToken","defaultOptions","withCredentials","tokenRoot","loginUrl","signupUrl","unlinkUrl","tokenName","tokenSeparator","tokenPrefix","authHeader","authToken","storageType","cordova","resolveToken","response","config","accessToken","access_token","token","data","tokenRootData","split","reduce","o","x","providers","facebook","name","redirectUri","authorizationEndpoint","additionalUrlParams","display","scope","scopeDelimiter","oauthType","popupOptions","width","height","google","prompt","undefined","login_hint","access_type","include_granted_scopes","openid.realm","hd","state","Math","random","toString","substr","github","instagram","linkedin","twitter","twitch","live","yahoo","bitbucket","spotify","ConfigService","options","this","assign","concat","_d","_e","acc","next","decorators","type","Injectable","ctorParameters","Inject","args","StorageService","prototype","updateStorageType","get","set","value","date","remove","BrowserStorageService","_super","__extends","_this","call","store","console","warn","checkIsStorageAvailable","getCookie","getItem","setCookie","setItem","removeCookie","removeItem","isCookieStorageAvailable","isWindowStorageAvailable","supported","substring","e","document","Date","now","toUTCString","expires","path","cookie","RegExp","SharedService","storage","getToken","sent","getPayload","base64Url","base64","length","JSON","parse","b64DecodeUnicode","setToken","expDate","getExpirationDate","removeToken","isAuthenticated","exp","round","getTime","payload","setUTCSeconds","logout","Observable","create","observer","then","complete","setStorageType","str","decodeURIComponent","Array","atob","c","charCodeAt","slice","PopupService","open","stringifiedOptions","stringifyOptions","prepareOptions","windowName","navigator","userAgent","isCordovaApp","popupWindow","focus","eventListener","pollPopup","Error","merge","fromEvent","pipe","delay","switchMap","event","closed","throw","indexOf","empty","parser","createElement","href","search","hash","queryParams","hashParams","parseQueryString","qs","allParams","close","of","take","interval","_throw","popupWindowOrigin","left","screenX","outerWidth","top","screenY","outerHeight","toolbar","visibleToolbar","joinedKeyValue","keyValue","Oauth1Service","http","popup","oauthOptions","userData","serverUrl","post","authorizationData","oauthData","exchangeForToken","body","method","exchangeForTokenUrl","request","HttpClient","Oauth2Service","getAuthorizationData","responseType","clientId","_f","resolvedState","filter","_","__window","__self","self","WorkerGlobalScope","_root","global","root_1","isArray","tryCatchTarget","tryCatcher","apply","arguments","errorObject_1","errorObject","fn","UnsubscriptionError","errors","err","i","stack","message","flattenUnsubscriptionErrors","errs","UnsubscriptionError_1","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","len","isFunction_1","isFunction","tryCatch_1","tryCatch","isArray_1","sub","isObject_1","isObject","push","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","splice","parent","Symbol","root","exports","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Observer_1","SafeSubscriber","rxSubscriber_1","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","nextOrObserver","Subscriber_1","getSymbolObservable","$$observable","observable","pipeFromArray","fns","input","prev","noop_1","noop","_i","Observable$$1","subscribe","_isScalar","_subscribe","lift","operator","source","sink","toSubscriber_1","toSubscriber","_trySubscribe","forEach","PromiseCtor","Rx","Promise","resolve","reject","observable_1","operations","pipe_1","toPromise","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","SubjectSubscriber_1","Subject","hasError","thrownError","AnonymousSubject","ObjectUnsubscribedError_1","copy","SubjectSubscription_1","asObservable","Observable_1","Subject_2","AsyncSubject","hasNext","hasCompleted","Subject_1","dispatchNext","arg","dispatchError","BoundCallbackObservable","callbackFunc","selector","scheduler","func","schedule","dispatch","AsyncSubject_1","handler","handlerFn","innerArgs","result_1","result_2","bindCallback","bindCallback_1","_a","shift","dispatchNext$1","dispatchError$1","BoundNodeCallbackObservable","bindNodeCallback","bindNodeCallback_1","ScalarObservable","done","EmptyObservable","ArrayObservable","array","isScheduler_1","isScheduler","pop","ScalarObservable_1","EmptyObservable_1","count","OuterSubscriber","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","symbolIteratorPonyfill","iterator","Set_1","Set","Map_1","Map","getOwnPropertyNames","$$iterator","InnerSubscriber","outerSubscriber","result","InnerSubscriber_1","isArrayLike_1","isArrayLike","isPromise_1","isPromise","setTimeout","iterator_1","item","obs","TypeError","msg","none","combineLatest_2$2","observables","project","ArrayObservable_1","CombineLatestOperator","CombineLatestSubscriber","CombineLatestOperator_1","active","values","toRespond","subscribeToResult_1","subscribeToResult","unused","oldVal","_tryProject","OuterSubscriber_1","combineLatest_1","combineLatest","dispatchNext$2","dispatchError$2","PromiseObservable","promise","IteratorObservable_2","IteratorObservable","StringIterator","ArrayIterator","getIterator","return","idx","charAt","arr","isNaN","isFinite","valueAsNumber","sign","floor","abs","maxSafeInteger","toLength","pow","ArrayLikeObservable","arrayLike","Notification","kind","hasValue","observe","do","accept","toObservable","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn_2","ObserveOnOperator","ObserveOnSubscriber","ObserveOnOperator_1","notification","scheduleMessage","ObserveOnMessage","Notification_1","ObserveOnSubscriber_1","FromObservable","ish","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","FromObservable_1","mergeMap_2","resultSelector","concurrent","Number","POSITIVE_INFINITY","MergeMapOperator","MergeMapSubscriber","MergeMapOperator_1","buffer","_tryNext","_innerSub","_notifyResultSelector","mergeMap_1","mergeMap","identity_1","identity","mergeAll_1","mergeAll","from_1","from","concatAll_1","concatAll","of_1","concat_1","DeferObservable_2","DeferObservable","observableFactory","DeferSubscriber","factory","tryDefer","_callFactory","defer","defer_1","empty_1","ForkJoinObservable_2","ForkJoinObservable","sources","ForkJoinSubscriber","completed","haveValues","total","innerSubscription","_hasValue","forkJoin","forkJoin_1","FromEventObservable","sourceObj","eventName","target","setupSubscription","addEventListener","removeEventListener","source_1","on","off","source_2","addListener","removeListener","source_3","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_callSelector","retValue","_callAddHandler","errorSubscriber","fromEventPattern","fromEventPattern_1","fromPromise","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","generate","generate_1","IfObservable_2","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","if","if_1","_if","val","parseFloat","Action","work","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Action_1","Scheduler","SchedulerAction","AsyncScheduler","scheduled","action","Scheduler_1","AsyncScheduler_1","AsyncAction_1","IntervalObservable","period","async_1","async","isNumeric_1","isNumeric","interval_1","mergeStatic$1","last","mergeStatic","merge_1","race_2","RaceOperator","RaceSubscriber","RaceOperator_1","hasFirst","race","race_1","NeverObservable","never","never_1","onErrorResumeNext_2$1","nextSources","OnErrorResumeNextOperator","onErrorResumeNextStatic_1","OnErrorResumeNextSubscriber","subscribeToNextSource","onErrorResumeNext_1","onErrorResumeNextStatic","onErrorResumeNext","dispatch$1","PairsObservable","pairs","pairs_1","RangeObservable","start","_count","range","range_1","UsingObservable_2","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","using","using_1","ErrorObservable","throw_1","TimerObservable","dueTime","isDate_1","isDate","initialDelay","timer","timer_1","zip_2$1","zipStatic","ZipOperator","zipStatic_1","ZipSubscriber","ZipOperator_1","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","ZipSubscriber_1","nextResult","isComplete","zip_1","zip","map_2","thisArg","MapOperator","MapSubscriber","MapOperator_1","ajaxGet","headers","AjaxObservable","ajaxGet_1","ajaxPost","ajaxPost_1","ajaxDelete","ajaxDelete_1","ajaxPut","ajaxPut_1","ajaxPatch","ajaxPatch_1","mapResponse","map_1","ajaxGetJSON","ajaxGetJSON_1","urlOrRequest","createXHR","crossDomain","XMLHttpRequest","XDomainRequest","progId","progIds","ActiveXObject","getXMLHttpRequest","timeout","prop","hasOwnProperty","AjaxSubscriber","delete","put","patch","getJSON","AjaxObservable_2","FormData","serializeBody","send","xhr","AjaxResponse","_b","user","password","setupEvents","setHeaders","contentType","splitIndex","encodeURI","stringify","setRequestHeader","progressSubscriber","xhrTimeout","AjaxTimeoutError","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","AjaxError","onerror","xhrReadyStateChange","readyState","status_1","status","responseText","onreadystatechange","abort","AjaxSubscriber_1","originalEvent","parseXhrResponse","AjaxResponse_1","AjaxError_1","responseXML","ajax","ajax_1","QueueAction","QueueScheduler","QueueAction_1","ReplaySubject_2","ReplaySubject","bufferSize","windowTime","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","queue_1","eventsCount","spliceCount","time","max","assignImpl","k","getAssign","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","assign_1","ReplaySubject_1","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","_connectSocket","binaryType","onopen","openObserver","queue","closingObserver","code","reason","onclose","closeObserver","wasClean","onmessage","webSocket","webSocket_1","buffer_2$2","closingNotifier","BufferOperator","BufferSubscriber","buffer_1","bufferCount_2$2","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","bufferCount_1","bufferCount","bufferTime_2$2","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeOperator","BufferTimeSubscriber","Context","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","prevContext","bufferTime_1","bufferTime","bufferToggle_2$2","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferToggle","bufferWhen_2$2","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","bufferWhen","catchError_2","CatchOperator","caught","CatchSubscriber","err2","catchError_1","catchError","catch","catch_1","_catch","combineAll_1","combineAll","concatMap_1","concatMap","innerObservable","concatMapTo_1","concatMapTo","count_2$2","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize_2$2","DeMaterializeOperator","DeMaterializeSubscriber","dematerialize_1","dematerialize","debounce_2$2","durationSelector","DebounceOperator","DebounceSubscriber","durationSubscription","emitValue","duration","debounce_1","debounce","debounceTime_2$2","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debouncedNext","dispatchNext$3","debounceTime_1","debounceTime","defaultIfEmpty_2$2","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","defaultIfEmpty","delay_2$2","delayFor","DelayOperator","DelaySubscriber","delay_1","_schedule","scheduleNotification","DelayMessage","delayWhen_2$2","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","delayWhen_1","delayWhen","minimalSetImpl","MinimalSet","_values","has","defineProperty","clear","distinct_2$2","keySelector","flushes","DistinctOperator","DistinctSubscriber","_useKeySelector","_finalizeNext","distinct_1","distinct","distinctUntilChanged_2$2","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","distinctUntilChanged_1","distinctUntilChanged","distinctUntilKeyChanged_1","distinctUntilKeyChanged","tap_2","DoOperator","DoSubscriber","safeSubscriber","tap_1","tap","do_1","_do","exhaust_2$2","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","exhaust_1","exhaust","exhaustMap_2$2","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","exhaustMap","expand_2$2","ExpandOperator","ExpandSubscriber","ExpandOperator_1","subscribeToProjection","expand_1","expand","ArgumentOutOfRangeError","elementAt_2$2","ElementAtOperator","ArgumentOutOfRangeError_1","ElementAtSubscriber","elementAt_1","elementAt","filter_2$2","FilterOperator","FilterSubscriber","filter_1","finalize_2","callback","FinallyOperator","FinallySubscriber","finalize_1","finalize","finally","finally_1","_finally","find_2$2","FindValueOperator","yieldIndex","FindValueSubscriber","FindValueOperator_1","find_1","find","findIndex_1","findIndex","EmptyError","first_2$2","FirstOperator","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError_1","first_1","first","MapPolyfill","size","_keys","cb","MapPolyfill_1","FastMap","groupBy_2$2","elementSelector","subjectSelector","GroupByOperator","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","FastMap_1","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","GroupedObservable_1","groupBy_1","groupBy","ignoreElements_2$2","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","ignoreElements","isEmpty_2$2","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit_2$2","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","audit","auditTime_1","auditTime","last_2$2","LastOperator","LastSubscriber","last_1","let","let_1","letProto","letBind","every_2$2","EveryOperator","EverySubscriber","everyValueMatch","every_1","every","mapTo_2$2","MapToOperator","MapToSubscriber","mapTo_1","mapTo","materialize_2$2","MaterializeOperator","MaterializeSubscriber","materialize_1","materialize","scan_2","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","takeLast_2","TakeLastOperator","TakeLastSubscriber","ring","scan_1","scan","takeLast_1","takeLast","comparer","reduce_1","max_1","flatMap","mergeMapTo_2$2","MergeMapToOperator","MergeMapToSubscriber","MergeMapToOperator_1","mergeMapTo_1","mergeMapTo","flatMapTo","mergeScan_2$2","MergeScanOperator","MergeScanSubscriber","MergeScanOperator_1","mergeScan_1","mergeScan","min","min_1","refCount_2","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","refCount_1","ConnectableObservable_2","connectableProto","connectableObservableDescriptor","writable","multicast_2$2","subjectOrSubjectFactory","MulticastOperator","ConnectableObservable_1","multicast_1","multicast","observeOn","pairwise_2$2","PairwiseOperator","PairwiseSubscriber","hasPrev","pairwise_1","pairwise","pred","notPred","not_1","not","partition_1","partition","properties","props","currentProp","p","pluck_1","pluck","publish_1","publish","BehaviorSubject","_value","getValue","BehaviorSubject_1","publishBehavior_1","publishBehavior","selectorOrScheduler","publishReplay_1","publishReplay","publishLast_1","publishLast","repeat_2$2","RepeatOperator","RepeatSubscriber","repeat_1","repeat","repeatWhen_2$2","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","repeatWhen_1","repeatWhen","retry_2$2","RetryOperator","RetrySubscriber","retry_1","retry","retryWhen_2$2","RetryWhenOperator","RetryWhenSubscriber","retryWhen_1","retryWhen","sample_2$2","SampleOperator","sampleSubscriber","SampleSubscriber","sample_1","sample","sampleTime_2$2","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","sampleTime_1","sampleTime","sequenceEqual_2$2","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","SequenceEqualOperator_1","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","a","b","areEqual","nextB","SequenceEqualSubscriber_1","sequenceEqual_1","sequenceEqual","shareSubjectFactory","share_1","share","shareReplayOperator","shareReplay_1","shareReplay","single_2$2","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","single","skip_2$2","SkipOperator","SkipSubscriber","skip_1","skip","skipLast_2$2","SkipLastOperator","_skipCount","SkipLastSubscriber","_ring","skipCount","currentIndex","oldValue","skipLast_1","skipLast","skipUntil_2$2","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipUntil","skipWhile_2$2","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","skipWhile","startWith_1","startWith","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","onGlobalMessage","globalMessageHandler","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","AsapAction","Immediate_1","Immediate","AsapScheduler","AsapAction_1","SubscribeOnObservable","delayTime","asap_1","asap","subscribeOn_2$2","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","subscribeOn","switchMap_2","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchAll_1","switchAll","switch","switch_1","_switch","switchMapTo_2$2","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","switchMapTo","take_2$2","TakeOperator","TakeSubscriber","take_1","takeUntil_2$2","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeUntil","takeWhile_2$2","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","takeWhile","defaultThrottleConfig","leading","trailing","throttle","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","throttle_1","throttleTime_2$2","ThrottleTimeOperator","ThrottleTimeSubscriber","dispatchNext$4","throttleTime_1","throttleTime","timeInterval_2$2","TimeIntervalOperator","TimeInterval","TimeInterval_1","TimeIntervalSubscriber","lastTime","span","timeInterval_1","timeInterval","TimeoutError","timeout_2$2","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","errorInstance","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","timeout_1","timeoutWith_2$2","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutWith_1","timeoutWith","timestamp_2$2","Timestamp","timestamp","timestamp_1","toArrayReducer","toArray_1","toArray","window_2$2","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowCount_2$2","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","windowCount_1","windowCount","windowTime_2$2","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","timeSpanState","windowTime_1","windowToggle_2$2","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowToggle","windowWhen_2$2","unsubscribeClosingNotification","closingNotification","windowWhen_1","windowWhen","withLatestFrom_2$2","WithLatestFromOperator","WithLatestFromSubscriber","found","withLatestFrom_1","withLatestFrom","zipProto","zipAll_1","zipAll","subscribedFrame","unsubscribedFrame","SubscriptionLoggable","logSubscribedFrame","SubscriptionLog_1","SubscriptionLog","logUnsubscribedFrame","subscriptionLogs","oldSubscriptionLog","derivedCtor","baseCtors","baseCtor","propertyKeys","j","len2","name_1","ColdObservable","messages","scheduleMessages","messagesLength","frame","ColdObservable_2","applyMixins_1","applyMixins","SubscriptionLoggable_1","HotObservable","setup","HotObservable_2","VirtualTimeScheduler_2","VirtualTimeScheduler","maxFrames","VirtualAction","frameTimeFactor","sort","sortActions","defaultMaxFrame","RequestAnimationFrameDefinition","TestScheduler","assertDeepEqual","VirtualTimeScheduler_1","hotObservables","coldObservables","flushTests","createTime","marbles","createColdObservable","parseMarbles","cold","ColdObservable_1","createHotObservable","HotObservable_1","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","readyFlushTests","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrameAction","AnimationFrame_1","AnimationFrame","Observable$2","AnimationFrameScheduler","AnimationFrameAction_1","OauthService","shared","depProviders","provide","useValue","deps","authenticate","providerOf","Injector","unlink","provider","LocalService","login","signup","AuthService","local","oauth","link","JwtInterceptor","intercept","req","all","auth","newReq","clone","Ng2UiAuthModule","forRoot","configOptions","defaultJwtInterceptor","ngModule","useClass","HTTP_INTERCEPTORS","multi","NgModule","imports","HttpClientModule"],"mappings":"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"}
